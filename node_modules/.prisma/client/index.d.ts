
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Eater
 * 
 */
export type Eater = $Result.DefaultSelection<Prisma.$EaterPayload>
/**
 * Model DietaryRestriction
 * 
 */
export type DietaryRestriction = $Result.DefaultSelection<Prisma.$DietaryRestrictionPayload>
/**
 * Model Restaurant
 * 
 */
export type Restaurant = $Result.DefaultSelection<Prisma.$RestaurantPayload>
/**
 * Model Table
 * 
 */
export type Table = $Result.DefaultSelection<Prisma.$TablePayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model Endorsement
 * 
 */
export type Endorsement = $Result.DefaultSelection<Prisma.$EndorsementPayload>
/**
 * Model DietaryEndorsementMapping
 * 
 */
export type DietaryEndorsementMapping = $Result.DefaultSelection<Prisma.$DietaryEndorsementMappingPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Eaters
 * const eaters = await prisma.eater.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Eaters
   * const eaters = await prisma.eater.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.eater`: Exposes CRUD operations for the **Eater** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eaters
    * const eaters = await prisma.eater.findMany()
    * ```
    */
  get eater(): Prisma.EaterDelegate<ExtArgs>;

  /**
   * `prisma.dietaryRestriction`: Exposes CRUD operations for the **DietaryRestriction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DietaryRestrictions
    * const dietaryRestrictions = await prisma.dietaryRestriction.findMany()
    * ```
    */
  get dietaryRestriction(): Prisma.DietaryRestrictionDelegate<ExtArgs>;

  /**
   * `prisma.restaurant`: Exposes CRUD operations for the **Restaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurants
    * const restaurants = await prisma.restaurant.findMany()
    * ```
    */
  get restaurant(): Prisma.RestaurantDelegate<ExtArgs>;

  /**
   * `prisma.table`: Exposes CRUD operations for the **Table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tables
    * const tables = await prisma.table.findMany()
    * ```
    */
  get table(): Prisma.TableDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs>;

  /**
   * `prisma.endorsement`: Exposes CRUD operations for the **Endorsement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Endorsements
    * const endorsements = await prisma.endorsement.findMany()
    * ```
    */
  get endorsement(): Prisma.EndorsementDelegate<ExtArgs>;

  /**
   * `prisma.dietaryEndorsementMapping`: Exposes CRUD operations for the **DietaryEndorsementMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DietaryEndorsementMappings
    * const dietaryEndorsementMappings = await prisma.dietaryEndorsementMapping.findMany()
    * ```
    */
  get dietaryEndorsementMapping(): Prisma.DietaryEndorsementMappingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Eater: 'Eater',
    DietaryRestriction: 'DietaryRestriction',
    Restaurant: 'Restaurant',
    Table: 'Table',
    Reservation: 'Reservation',
    Endorsement: 'Endorsement',
    DietaryEndorsementMapping: 'DietaryEndorsementMapping'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'eater' | 'dietaryRestriction' | 'restaurant' | 'table' | 'reservation' | 'endorsement' | 'dietaryEndorsementMapping'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Eater: {
        payload: Prisma.$EaterPayload<ExtArgs>
        fields: Prisma.EaterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EaterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EaterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          findFirst: {
            args: Prisma.EaterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EaterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          findMany: {
            args: Prisma.EaterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>[]
          }
          create: {
            args: Prisma.EaterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          createMany: {
            args: Prisma.EaterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EaterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          update: {
            args: Prisma.EaterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          deleteMany: {
            args: Prisma.EaterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EaterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EaterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EaterPayload>
          }
          aggregate: {
            args: Prisma.EaterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEater>
          }
          groupBy: {
            args: Prisma.EaterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EaterGroupByOutputType>[]
          }
          count: {
            args: Prisma.EaterCountArgs<ExtArgs>,
            result: $Utils.Optional<EaterCountAggregateOutputType> | number
          }
        }
      }
      DietaryRestriction: {
        payload: Prisma.$DietaryRestrictionPayload<ExtArgs>
        fields: Prisma.DietaryRestrictionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DietaryRestrictionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DietaryRestrictionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          findFirst: {
            args: Prisma.DietaryRestrictionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DietaryRestrictionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          findMany: {
            args: Prisma.DietaryRestrictionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>[]
          }
          create: {
            args: Prisma.DietaryRestrictionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          createMany: {
            args: Prisma.DietaryRestrictionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DietaryRestrictionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          update: {
            args: Prisma.DietaryRestrictionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          deleteMany: {
            args: Prisma.DietaryRestrictionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DietaryRestrictionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DietaryRestrictionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryRestrictionPayload>
          }
          aggregate: {
            args: Prisma.DietaryRestrictionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDietaryRestriction>
          }
          groupBy: {
            args: Prisma.DietaryRestrictionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DietaryRestrictionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DietaryRestrictionCountArgs<ExtArgs>,
            result: $Utils.Optional<DietaryRestrictionCountAggregateOutputType> | number
          }
        }
      }
      Restaurant: {
        payload: Prisma.$RestaurantPayload<ExtArgs>
        fields: Prisma.RestaurantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findFirst: {
            args: Prisma.RestaurantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findMany: {
            args: Prisma.RestaurantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>[]
          }
          create: {
            args: Prisma.RestaurantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          createMany: {
            args: Prisma.RestaurantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RestaurantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          update: {
            args: Prisma.RestaurantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          aggregate: {
            args: Prisma.RestaurantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRestaurant>
          }
          groupBy: {
            args: Prisma.RestaurantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantCountArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantCountAggregateOutputType> | number
          }
        }
      }
      Table: {
        payload: Prisma.$TablePayload<ExtArgs>
        fields: Prisma.TableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findFirst: {
            args: Prisma.TableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findMany: {
            args: Prisma.TableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>[]
          }
          create: {
            args: Prisma.TableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          createMany: {
            args: Prisma.TableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          update: {
            args: Prisma.TableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          deleteMany: {
            args: Prisma.TableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          aggregate: {
            args: Prisma.TableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTable>
          }
          groupBy: {
            args: Prisma.TableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TableGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableCountArgs<ExtArgs>,
            result: $Utils.Optional<TableCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      Endorsement: {
        payload: Prisma.$EndorsementPayload<ExtArgs>
        fields: Prisma.EndorsementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EndorsementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EndorsementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          findFirst: {
            args: Prisma.EndorsementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EndorsementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          findMany: {
            args: Prisma.EndorsementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>[]
          }
          create: {
            args: Prisma.EndorsementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          createMany: {
            args: Prisma.EndorsementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EndorsementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          update: {
            args: Prisma.EndorsementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          deleteMany: {
            args: Prisma.EndorsementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EndorsementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EndorsementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndorsementPayload>
          }
          aggregate: {
            args: Prisma.EndorsementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEndorsement>
          }
          groupBy: {
            args: Prisma.EndorsementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EndorsementGroupByOutputType>[]
          }
          count: {
            args: Prisma.EndorsementCountArgs<ExtArgs>,
            result: $Utils.Optional<EndorsementCountAggregateOutputType> | number
          }
        }
      }
      DietaryEndorsementMapping: {
        payload: Prisma.$DietaryEndorsementMappingPayload<ExtArgs>
        fields: Prisma.DietaryEndorsementMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DietaryEndorsementMappingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DietaryEndorsementMappingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          findFirst: {
            args: Prisma.DietaryEndorsementMappingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DietaryEndorsementMappingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          findMany: {
            args: Prisma.DietaryEndorsementMappingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>[]
          }
          create: {
            args: Prisma.DietaryEndorsementMappingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          createMany: {
            args: Prisma.DietaryEndorsementMappingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DietaryEndorsementMappingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          update: {
            args: Prisma.DietaryEndorsementMappingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          deleteMany: {
            args: Prisma.DietaryEndorsementMappingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DietaryEndorsementMappingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DietaryEndorsementMappingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DietaryEndorsementMappingPayload>
          }
          aggregate: {
            args: Prisma.DietaryEndorsementMappingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDietaryEndorsementMapping>
          }
          groupBy: {
            args: Prisma.DietaryEndorsementMappingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DietaryEndorsementMappingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DietaryEndorsementMappingCountArgs<ExtArgs>,
            result: $Utils.Optional<DietaryEndorsementMappingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EaterCountOutputType
   */

  export type EaterCountOutputType = {
    reservations: number
  }

  export type EaterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | EaterCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes

  /**
   * EaterCountOutputType without action
   */
  export type EaterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EaterCountOutputType
     */
    select?: EaterCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EaterCountOutputType without action
   */
  export type EaterCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }



  /**
   * Count Type DietaryRestrictionCountOutputType
   */

  export type DietaryRestrictionCountOutputType = {
    dietaryEndorsementMappings: number
  }

  export type DietaryRestrictionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dietaryEndorsementMappings?: boolean | DietaryRestrictionCountOutputTypeCountDietaryEndorsementMappingsArgs
  }

  // Custom InputTypes

  /**
   * DietaryRestrictionCountOutputType without action
   */
  export type DietaryRestrictionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestrictionCountOutputType
     */
    select?: DietaryRestrictionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DietaryRestrictionCountOutputType without action
   */
  export type DietaryRestrictionCountOutputTypeCountDietaryEndorsementMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DietaryEndorsementMappingWhereInput
  }



  /**
   * Count Type RestaurantCountOutputType
   */

  export type RestaurantCountOutputType = {
    tables: number
  }

  export type RestaurantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | RestaurantCountOutputTypeCountTablesArgs
  }

  // Custom InputTypes

  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantCountOutputType
     */
    select?: RestaurantCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeCountTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
  }



  /**
   * Count Type TableCountOutputType
   */

  export type TableCountOutputType = {
    reservations: number
  }

  export type TableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | TableCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes

  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableCountOutputType
     */
    select?: TableCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }



  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    eaters: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eaters?: boolean | ReservationCountOutputTypeCountEatersArgs
  }

  // Custom InputTypes

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountEatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EaterWhereInput
  }



  /**
   * Count Type EndorsementCountOutputType
   */

  export type EndorsementCountOutputType = {
    dietaryEndorsementMappings: number
  }

  export type EndorsementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dietaryEndorsementMappings?: boolean | EndorsementCountOutputTypeCountDietaryEndorsementMappingsArgs
  }

  // Custom InputTypes

  /**
   * EndorsementCountOutputType without action
   */
  export type EndorsementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndorsementCountOutputType
     */
    select?: EndorsementCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EndorsementCountOutputType without action
   */
  export type EndorsementCountOutputTypeCountDietaryEndorsementMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DietaryEndorsementMappingWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Eater
   */

  export type AggregateEater = {
    _count: EaterCountAggregateOutputType | null
    _min: EaterMinAggregateOutputType | null
    _max: EaterMaxAggregateOutputType | null
  }

  export type EaterMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
  }

  export type EaterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
  }

  export type EaterCountAggregateOutputType = {
    id: number
    name: number
    location: number
    dietaryRestrictionIds: number
    _all: number
  }


  export type EaterMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
  }

  export type EaterMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
  }

  export type EaterCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    dietaryRestrictionIds?: true
    _all?: true
  }

  export type EaterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eater to aggregate.
     */
    where?: EaterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eaters to fetch.
     */
    orderBy?: EaterOrderByWithRelationInput | EaterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EaterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eaters
    **/
    _count?: true | EaterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EaterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EaterMaxAggregateInputType
  }

  export type GetEaterAggregateType<T extends EaterAggregateArgs> = {
        [P in keyof T & keyof AggregateEater]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEater[P]>
      : GetScalarType<T[P], AggregateEater[P]>
  }




  export type EaterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EaterWhereInput
    orderBy?: EaterOrderByWithAggregationInput | EaterOrderByWithAggregationInput[]
    by: EaterScalarFieldEnum[] | EaterScalarFieldEnum
    having?: EaterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EaterCountAggregateInputType | true
    _min?: EaterMinAggregateInputType
    _max?: EaterMaxAggregateInputType
  }

  export type EaterGroupByOutputType = {
    id: string
    name: string
    location: string | null
    dietaryRestrictionIds: string[]
    _count: EaterCountAggregateOutputType | null
    _min: EaterMinAggregateOutputType | null
    _max: EaterMaxAggregateOutputType | null
  }

  type GetEaterGroupByPayload<T extends EaterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EaterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EaterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EaterGroupByOutputType[P]>
            : GetScalarType<T[P], EaterGroupByOutputType[P]>
        }
      >
    >


  export type EaterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    dietaryRestrictionIds?: boolean
    reservations?: boolean | Eater$reservationsArgs<ExtArgs>
    _count?: boolean | EaterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eater"]>

  export type EaterSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    dietaryRestrictionIds?: boolean
  }

  export type EaterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | Eater$reservationsArgs<ExtArgs>
    _count?: boolean | EaterCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EaterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Eater"
    objects: {
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string | null
      dietaryRestrictionIds: string[]
    }, ExtArgs["result"]["eater"]>
    composites: {}
  }


  type EaterGetPayload<S extends boolean | null | undefined | EaterDefaultArgs> = $Result.GetResult<Prisma.$EaterPayload, S>

  type EaterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EaterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EaterCountAggregateInputType | true
    }

  export interface EaterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Eater'], meta: { name: 'Eater' } }
    /**
     * Find zero or one Eater that matches the filter.
     * @param {EaterFindUniqueArgs} args - Arguments to find a Eater
     * @example
     * // Get one Eater
     * const eater = await prisma.eater.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EaterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EaterFindUniqueArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Eater that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EaterFindUniqueOrThrowArgs} args - Arguments to find a Eater
     * @example
     * // Get one Eater
     * const eater = await prisma.eater.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EaterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Eater that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterFindFirstArgs} args - Arguments to find a Eater
     * @example
     * // Get one Eater
     * const eater = await prisma.eater.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EaterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterFindFirstArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Eater that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterFindFirstOrThrowArgs} args - Arguments to find a Eater
     * @example
     * // Get one Eater
     * const eater = await prisma.eater.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EaterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Eaters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eaters
     * const eaters = await prisma.eater.findMany()
     * 
     * // Get first 10 Eaters
     * const eaters = await prisma.eater.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eaterWithIdOnly = await prisma.eater.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EaterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Eater.
     * @param {EaterCreateArgs} args - Arguments to create a Eater.
     * @example
     * // Create one Eater
     * const Eater = await prisma.eater.create({
     *   data: {
     *     // ... data to create a Eater
     *   }
     * })
     * 
    **/
    create<T extends EaterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EaterCreateArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Eaters.
     *     @param {EaterCreateManyArgs} args - Arguments to create many Eaters.
     *     @example
     *     // Create many Eaters
     *     const eater = await prisma.eater.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EaterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Eater.
     * @param {EaterDeleteArgs} args - Arguments to delete one Eater.
     * @example
     * // Delete one Eater
     * const Eater = await prisma.eater.delete({
     *   where: {
     *     // ... filter to delete one Eater
     *   }
     * })
     * 
    **/
    delete<T extends EaterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EaterDeleteArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Eater.
     * @param {EaterUpdateArgs} args - Arguments to update one Eater.
     * @example
     * // Update one Eater
     * const eater = await prisma.eater.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EaterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EaterUpdateArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Eaters.
     * @param {EaterDeleteManyArgs} args - Arguments to filter Eaters to delete.
     * @example
     * // Delete a few Eaters
     * const { count } = await prisma.eater.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EaterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EaterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eaters
     * const eater = await prisma.eater.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EaterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EaterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Eater.
     * @param {EaterUpsertArgs} args - Arguments to update or create a Eater.
     * @example
     * // Update or create a Eater
     * const eater = await prisma.eater.upsert({
     *   create: {
     *     // ... data to create a Eater
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Eater we want to update
     *   }
     * })
    **/
    upsert<T extends EaterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EaterUpsertArgs<ExtArgs>>
    ): Prisma__EaterClient<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Eaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterCountArgs} args - Arguments to filter Eaters to count.
     * @example
     * // Count the number of Eaters
     * const count = await prisma.eater.count({
     *   where: {
     *     // ... the filter for the Eaters we want to count
     *   }
     * })
    **/
    count<T extends EaterCountArgs>(
      args?: Subset<T, EaterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EaterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Eater.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EaterAggregateArgs>(args: Subset<T, EaterAggregateArgs>): Prisma.PrismaPromise<GetEaterAggregateType<T>>

    /**
     * Group by Eater.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EaterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EaterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EaterGroupByArgs['orderBy'] }
        : { orderBy?: EaterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EaterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEaterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Eater model
   */
  readonly fields: EaterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Eater.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EaterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reservations<T extends Eater$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, Eater$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Eater model
   */ 
  interface EaterFieldRefs {
    readonly id: FieldRef<"Eater", 'String'>
    readonly name: FieldRef<"Eater", 'String'>
    readonly location: FieldRef<"Eater", 'String'>
    readonly dietaryRestrictionIds: FieldRef<"Eater", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * Eater findUnique
   */
  export type EaterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter, which Eater to fetch.
     */
    where: EaterWhereUniqueInput
  }


  /**
   * Eater findUniqueOrThrow
   */
  export type EaterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter, which Eater to fetch.
     */
    where: EaterWhereUniqueInput
  }


  /**
   * Eater findFirst
   */
  export type EaterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter, which Eater to fetch.
     */
    where?: EaterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eaters to fetch.
     */
    orderBy?: EaterOrderByWithRelationInput | EaterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eaters.
     */
    cursor?: EaterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eaters.
     */
    distinct?: EaterScalarFieldEnum | EaterScalarFieldEnum[]
  }


  /**
   * Eater findFirstOrThrow
   */
  export type EaterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter, which Eater to fetch.
     */
    where?: EaterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eaters to fetch.
     */
    orderBy?: EaterOrderByWithRelationInput | EaterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eaters.
     */
    cursor?: EaterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eaters.
     */
    distinct?: EaterScalarFieldEnum | EaterScalarFieldEnum[]
  }


  /**
   * Eater findMany
   */
  export type EaterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter, which Eaters to fetch.
     */
    where?: EaterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eaters to fetch.
     */
    orderBy?: EaterOrderByWithRelationInput | EaterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eaters.
     */
    cursor?: EaterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eaters.
     */
    skip?: number
    distinct?: EaterScalarFieldEnum | EaterScalarFieldEnum[]
  }


  /**
   * Eater create
   */
  export type EaterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * The data needed to create a Eater.
     */
    data: XOR<EaterCreateInput, EaterUncheckedCreateInput>
  }


  /**
   * Eater createMany
   */
  export type EaterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eaters.
     */
    data: EaterCreateManyInput | EaterCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Eater update
   */
  export type EaterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * The data needed to update a Eater.
     */
    data: XOR<EaterUpdateInput, EaterUncheckedUpdateInput>
    /**
     * Choose, which Eater to update.
     */
    where: EaterWhereUniqueInput
  }


  /**
   * Eater updateMany
   */
  export type EaterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eaters.
     */
    data: XOR<EaterUpdateManyMutationInput, EaterUncheckedUpdateManyInput>
    /**
     * Filter which Eaters to update
     */
    where?: EaterWhereInput
  }


  /**
   * Eater upsert
   */
  export type EaterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * The filter to search for the Eater to update in case it exists.
     */
    where: EaterWhereUniqueInput
    /**
     * In case the Eater found by the `where` argument doesn't exist, create a new Eater with this data.
     */
    create: XOR<EaterCreateInput, EaterUncheckedCreateInput>
    /**
     * In case the Eater was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EaterUpdateInput, EaterUncheckedUpdateInput>
  }


  /**
   * Eater delete
   */
  export type EaterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    /**
     * Filter which Eater to delete.
     */
    where: EaterWhereUniqueInput
  }


  /**
   * Eater deleteMany
   */
  export type EaterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eaters to delete
     */
    where?: EaterWhereInput
  }


  /**
   * Eater.reservations
   */
  export type Eater$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Eater without action
   */
  export type EaterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
  }



  /**
   * Model DietaryRestriction
   */

  export type AggregateDietaryRestriction = {
    _count: DietaryRestrictionCountAggregateOutputType | null
    _min: DietaryRestrictionMinAggregateOutputType | null
    _max: DietaryRestrictionMaxAggregateOutputType | null
  }

  export type DietaryRestrictionMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DietaryRestrictionMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DietaryRestrictionCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DietaryRestrictionMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DietaryRestrictionMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DietaryRestrictionCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DietaryRestrictionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DietaryRestriction to aggregate.
     */
    where?: DietaryRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryRestrictions to fetch.
     */
    orderBy?: DietaryRestrictionOrderByWithRelationInput | DietaryRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DietaryRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DietaryRestrictions
    **/
    _count?: true | DietaryRestrictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DietaryRestrictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DietaryRestrictionMaxAggregateInputType
  }

  export type GetDietaryRestrictionAggregateType<T extends DietaryRestrictionAggregateArgs> = {
        [P in keyof T & keyof AggregateDietaryRestriction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDietaryRestriction[P]>
      : GetScalarType<T[P], AggregateDietaryRestriction[P]>
  }




  export type DietaryRestrictionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DietaryRestrictionWhereInput
    orderBy?: DietaryRestrictionOrderByWithAggregationInput | DietaryRestrictionOrderByWithAggregationInput[]
    by: DietaryRestrictionScalarFieldEnum[] | DietaryRestrictionScalarFieldEnum
    having?: DietaryRestrictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DietaryRestrictionCountAggregateInputType | true
    _min?: DietaryRestrictionMinAggregateInputType
    _max?: DietaryRestrictionMaxAggregateInputType
  }

  export type DietaryRestrictionGroupByOutputType = {
    id: string
    name: string
    _count: DietaryRestrictionCountAggregateOutputType | null
    _min: DietaryRestrictionMinAggregateOutputType | null
    _max: DietaryRestrictionMaxAggregateOutputType | null
  }

  type GetDietaryRestrictionGroupByPayload<T extends DietaryRestrictionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DietaryRestrictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DietaryRestrictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DietaryRestrictionGroupByOutputType[P]>
            : GetScalarType<T[P], DietaryRestrictionGroupByOutputType[P]>
        }
      >
    >


  export type DietaryRestrictionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dietaryEndorsementMappings?: boolean | DietaryRestriction$dietaryEndorsementMappingsArgs<ExtArgs>
    _count?: boolean | DietaryRestrictionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dietaryRestriction"]>

  export type DietaryRestrictionSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type DietaryRestrictionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dietaryEndorsementMappings?: boolean | DietaryRestriction$dietaryEndorsementMappingsArgs<ExtArgs>
    _count?: boolean | DietaryRestrictionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DietaryRestrictionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DietaryRestriction"
    objects: {
      dietaryEndorsementMappings: Prisma.$DietaryEndorsementMappingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["dietaryRestriction"]>
    composites: {}
  }


  type DietaryRestrictionGetPayload<S extends boolean | null | undefined | DietaryRestrictionDefaultArgs> = $Result.GetResult<Prisma.$DietaryRestrictionPayload, S>

  type DietaryRestrictionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DietaryRestrictionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DietaryRestrictionCountAggregateInputType | true
    }

  export interface DietaryRestrictionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DietaryRestriction'], meta: { name: 'DietaryRestriction' } }
    /**
     * Find zero or one DietaryRestriction that matches the filter.
     * @param {DietaryRestrictionFindUniqueArgs} args - Arguments to find a DietaryRestriction
     * @example
     * // Get one DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DietaryRestrictionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionFindUniqueArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DietaryRestriction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DietaryRestrictionFindUniqueOrThrowArgs} args - Arguments to find a DietaryRestriction
     * @example
     * // Get one DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DietaryRestrictionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DietaryRestriction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionFindFirstArgs} args - Arguments to find a DietaryRestriction
     * @example
     * // Get one DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DietaryRestrictionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionFindFirstArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DietaryRestriction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionFindFirstOrThrowArgs} args - Arguments to find a DietaryRestriction
     * @example
     * // Get one DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DietaryRestrictionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DietaryRestrictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DietaryRestrictions
     * const dietaryRestrictions = await prisma.dietaryRestriction.findMany()
     * 
     * // Get first 10 DietaryRestrictions
     * const dietaryRestrictions = await prisma.dietaryRestriction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dietaryRestrictionWithIdOnly = await prisma.dietaryRestriction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DietaryRestrictionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DietaryRestriction.
     * @param {DietaryRestrictionCreateArgs} args - Arguments to create a DietaryRestriction.
     * @example
     * // Create one DietaryRestriction
     * const DietaryRestriction = await prisma.dietaryRestriction.create({
     *   data: {
     *     // ... data to create a DietaryRestriction
     *   }
     * })
     * 
    **/
    create<T extends DietaryRestrictionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionCreateArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DietaryRestrictions.
     *     @param {DietaryRestrictionCreateManyArgs} args - Arguments to create many DietaryRestrictions.
     *     @example
     *     // Create many DietaryRestrictions
     *     const dietaryRestriction = await prisma.dietaryRestriction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DietaryRestrictionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DietaryRestriction.
     * @param {DietaryRestrictionDeleteArgs} args - Arguments to delete one DietaryRestriction.
     * @example
     * // Delete one DietaryRestriction
     * const DietaryRestriction = await prisma.dietaryRestriction.delete({
     *   where: {
     *     // ... filter to delete one DietaryRestriction
     *   }
     * })
     * 
    **/
    delete<T extends DietaryRestrictionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionDeleteArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DietaryRestriction.
     * @param {DietaryRestrictionUpdateArgs} args - Arguments to update one DietaryRestriction.
     * @example
     * // Update one DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DietaryRestrictionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionUpdateArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DietaryRestrictions.
     * @param {DietaryRestrictionDeleteManyArgs} args - Arguments to filter DietaryRestrictions to delete.
     * @example
     * // Delete a few DietaryRestrictions
     * const { count } = await prisma.dietaryRestriction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DietaryRestrictionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryRestrictionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DietaryRestrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DietaryRestrictions
     * const dietaryRestriction = await prisma.dietaryRestriction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DietaryRestrictionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DietaryRestriction.
     * @param {DietaryRestrictionUpsertArgs} args - Arguments to update or create a DietaryRestriction.
     * @example
     * // Update or create a DietaryRestriction
     * const dietaryRestriction = await prisma.dietaryRestriction.upsert({
     *   create: {
     *     // ... data to create a DietaryRestriction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DietaryRestriction we want to update
     *   }
     * })
    **/
    upsert<T extends DietaryRestrictionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryRestrictionUpsertArgs<ExtArgs>>
    ): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DietaryRestrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionCountArgs} args - Arguments to filter DietaryRestrictions to count.
     * @example
     * // Count the number of DietaryRestrictions
     * const count = await prisma.dietaryRestriction.count({
     *   where: {
     *     // ... the filter for the DietaryRestrictions we want to count
     *   }
     * })
    **/
    count<T extends DietaryRestrictionCountArgs>(
      args?: Subset<T, DietaryRestrictionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DietaryRestrictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DietaryRestriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DietaryRestrictionAggregateArgs>(args: Subset<T, DietaryRestrictionAggregateArgs>): Prisma.PrismaPromise<GetDietaryRestrictionAggregateType<T>>

    /**
     * Group by DietaryRestriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryRestrictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DietaryRestrictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DietaryRestrictionGroupByArgs['orderBy'] }
        : { orderBy?: DietaryRestrictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DietaryRestrictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDietaryRestrictionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DietaryRestriction model
   */
  readonly fields: DietaryRestrictionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DietaryRestriction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DietaryRestrictionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dietaryEndorsementMappings<T extends DietaryRestriction$dietaryEndorsementMappingsArgs<ExtArgs> = {}>(args?: Subset<T, DietaryRestriction$dietaryEndorsementMappingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DietaryRestriction model
   */ 
  interface DietaryRestrictionFieldRefs {
    readonly id: FieldRef<"DietaryRestriction", 'String'>
    readonly name: FieldRef<"DietaryRestriction", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DietaryRestriction findUnique
   */
  export type DietaryRestrictionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which DietaryRestriction to fetch.
     */
    where: DietaryRestrictionWhereUniqueInput
  }


  /**
   * DietaryRestriction findUniqueOrThrow
   */
  export type DietaryRestrictionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which DietaryRestriction to fetch.
     */
    where: DietaryRestrictionWhereUniqueInput
  }


  /**
   * DietaryRestriction findFirst
   */
  export type DietaryRestrictionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which DietaryRestriction to fetch.
     */
    where?: DietaryRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryRestrictions to fetch.
     */
    orderBy?: DietaryRestrictionOrderByWithRelationInput | DietaryRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DietaryRestrictions.
     */
    cursor?: DietaryRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DietaryRestrictions.
     */
    distinct?: DietaryRestrictionScalarFieldEnum | DietaryRestrictionScalarFieldEnum[]
  }


  /**
   * DietaryRestriction findFirstOrThrow
   */
  export type DietaryRestrictionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which DietaryRestriction to fetch.
     */
    where?: DietaryRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryRestrictions to fetch.
     */
    orderBy?: DietaryRestrictionOrderByWithRelationInput | DietaryRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DietaryRestrictions.
     */
    cursor?: DietaryRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DietaryRestrictions.
     */
    distinct?: DietaryRestrictionScalarFieldEnum | DietaryRestrictionScalarFieldEnum[]
  }


  /**
   * DietaryRestriction findMany
   */
  export type DietaryRestrictionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which DietaryRestrictions to fetch.
     */
    where?: DietaryRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryRestrictions to fetch.
     */
    orderBy?: DietaryRestrictionOrderByWithRelationInput | DietaryRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DietaryRestrictions.
     */
    cursor?: DietaryRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryRestrictions.
     */
    skip?: number
    distinct?: DietaryRestrictionScalarFieldEnum | DietaryRestrictionScalarFieldEnum[]
  }


  /**
   * DietaryRestriction create
   */
  export type DietaryRestrictionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * The data needed to create a DietaryRestriction.
     */
    data: XOR<DietaryRestrictionCreateInput, DietaryRestrictionUncheckedCreateInput>
  }


  /**
   * DietaryRestriction createMany
   */
  export type DietaryRestrictionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DietaryRestrictions.
     */
    data: DietaryRestrictionCreateManyInput | DietaryRestrictionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DietaryRestriction update
   */
  export type DietaryRestrictionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * The data needed to update a DietaryRestriction.
     */
    data: XOR<DietaryRestrictionUpdateInput, DietaryRestrictionUncheckedUpdateInput>
    /**
     * Choose, which DietaryRestriction to update.
     */
    where: DietaryRestrictionWhereUniqueInput
  }


  /**
   * DietaryRestriction updateMany
   */
  export type DietaryRestrictionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DietaryRestrictions.
     */
    data: XOR<DietaryRestrictionUpdateManyMutationInput, DietaryRestrictionUncheckedUpdateManyInput>
    /**
     * Filter which DietaryRestrictions to update
     */
    where?: DietaryRestrictionWhereInput
  }


  /**
   * DietaryRestriction upsert
   */
  export type DietaryRestrictionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * The filter to search for the DietaryRestriction to update in case it exists.
     */
    where: DietaryRestrictionWhereUniqueInput
    /**
     * In case the DietaryRestriction found by the `where` argument doesn't exist, create a new DietaryRestriction with this data.
     */
    create: XOR<DietaryRestrictionCreateInput, DietaryRestrictionUncheckedCreateInput>
    /**
     * In case the DietaryRestriction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DietaryRestrictionUpdateInput, DietaryRestrictionUncheckedUpdateInput>
  }


  /**
   * DietaryRestriction delete
   */
  export type DietaryRestrictionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
    /**
     * Filter which DietaryRestriction to delete.
     */
    where: DietaryRestrictionWhereUniqueInput
  }


  /**
   * DietaryRestriction deleteMany
   */
  export type DietaryRestrictionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DietaryRestrictions to delete
     */
    where?: DietaryRestrictionWhereInput
  }


  /**
   * DietaryRestriction.dietaryEndorsementMappings
   */
  export type DietaryRestriction$dietaryEndorsementMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    where?: DietaryEndorsementMappingWhereInput
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DietaryEndorsementMappingScalarFieldEnum | DietaryEndorsementMappingScalarFieldEnum[]
  }


  /**
   * DietaryRestriction without action
   */
  export type DietaryRestrictionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryRestriction
     */
    select?: DietaryRestrictionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryRestrictionInclude<ExtArgs> | null
  }



  /**
   * Model Restaurant
   */

  export type AggregateRestaurant = {
    _count: RestaurantCountAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  export type RestaurantMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RestaurantMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RestaurantCountAggregateOutputType = {
    id: number
    name: number
    endorsementsIds: number
    _all: number
  }


  export type RestaurantMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RestaurantMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RestaurantCountAggregateInputType = {
    id?: true
    name?: true
    endorsementsIds?: true
    _all?: true
  }

  export type RestaurantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurant to aggregate.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurants
    **/
    _count?: true | RestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantMaxAggregateInputType
  }

  export type GetRestaurantAggregateType<T extends RestaurantAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurant[P]>
      : GetScalarType<T[P], AggregateRestaurant[P]>
  }




  export type RestaurantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantWhereInput
    orderBy?: RestaurantOrderByWithAggregationInput | RestaurantOrderByWithAggregationInput[]
    by: RestaurantScalarFieldEnum[] | RestaurantScalarFieldEnum
    having?: RestaurantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantCountAggregateInputType | true
    _min?: RestaurantMinAggregateInputType
    _max?: RestaurantMaxAggregateInputType
  }

  export type RestaurantGroupByOutputType = {
    id: string
    name: string
    endorsementsIds: string[]
    _count: RestaurantCountAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  type GetRestaurantGroupByPayload<T extends RestaurantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    endorsementsIds?: boolean
    tables?: boolean | Restaurant$tablesArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurant"]>

  export type RestaurantSelectScalar = {
    id?: boolean
    name?: boolean
    endorsementsIds?: boolean
  }

  export type RestaurantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | Restaurant$tablesArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RestaurantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Restaurant"
    objects: {
      tables: Prisma.$TablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      endorsementsIds: string[]
    }, ExtArgs["result"]["restaurant"]>
    composites: {}
  }


  type RestaurantGetPayload<S extends boolean | null | undefined | RestaurantDefaultArgs> = $Result.GetResult<Prisma.$RestaurantPayload, S>

  type RestaurantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RestaurantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RestaurantCountAggregateInputType | true
    }

  export interface RestaurantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Restaurant'], meta: { name: 'Restaurant' } }
    /**
     * Find zero or one Restaurant that matches the filter.
     * @param {RestaurantFindUniqueArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestaurantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantFindUniqueArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Restaurant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RestaurantFindUniqueOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestaurantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestaurantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestaurantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Restaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurants
     * const restaurants = await prisma.restaurant.findMany()
     * 
     * // Get first 10 Restaurants
     * const restaurants = await prisma.restaurant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restaurantWithIdOnly = await prisma.restaurant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestaurantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Restaurant.
     * @param {RestaurantCreateArgs} args - Arguments to create a Restaurant.
     * @example
     * // Create one Restaurant
     * const Restaurant = await prisma.restaurant.create({
     *   data: {
     *     // ... data to create a Restaurant
     *   }
     * })
     * 
    **/
    create<T extends RestaurantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantCreateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Restaurants.
     *     @param {RestaurantCreateManyArgs} args - Arguments to create many Restaurants.
     *     @example
     *     // Create many Restaurants
     *     const restaurant = await prisma.restaurant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RestaurantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Restaurant.
     * @param {RestaurantDeleteArgs} args - Arguments to delete one Restaurant.
     * @example
     * // Delete one Restaurant
     * const Restaurant = await prisma.restaurant.delete({
     *   where: {
     *     // ... filter to delete one Restaurant
     *   }
     * })
     * 
    **/
    delete<T extends RestaurantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDeleteArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Restaurant.
     * @param {RestaurantUpdateArgs} args - Arguments to update one Restaurant.
     * @example
     * // Update one Restaurant
     * const restaurant = await prisma.restaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestaurantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Restaurants.
     * @param {RestaurantDeleteManyArgs} args - Arguments to filter Restaurants to delete.
     * @example
     * // Delete a few Restaurants
     * const { count } = await prisma.restaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestaurantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurants
     * const restaurant = await prisma.restaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestaurantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurant.
     * @param {RestaurantUpsertArgs} args - Arguments to update or create a Restaurant.
     * @example
     * // Update or create a Restaurant
     * const restaurant = await prisma.restaurant.upsert({
     *   create: {
     *     // ... data to create a Restaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurant we want to update
     *   }
     * })
    **/
    upsert<T extends RestaurantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpsertArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantCountArgs} args - Arguments to filter Restaurants to count.
     * @example
     * // Count the number of Restaurants
     * const count = await prisma.restaurant.count({
     *   where: {
     *     // ... the filter for the Restaurants we want to count
     *   }
     * })
    **/
    count<T extends RestaurantCountArgs>(
      args?: Subset<T, RestaurantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantAggregateArgs>(args: Subset<T, RestaurantAggregateArgs>): Prisma.PrismaPromise<GetRestaurantAggregateType<T>>

    /**
     * Group by Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Restaurant model
   */
  readonly fields: RestaurantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tables<T extends Restaurant$tablesArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Restaurant model
   */ 
  interface RestaurantFieldRefs {
    readonly id: FieldRef<"Restaurant", 'String'>
    readonly name: FieldRef<"Restaurant", 'String'>
    readonly endorsementsIds: FieldRef<"Restaurant", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * Restaurant findUnique
   */
  export type RestaurantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant findUniqueOrThrow
   */
  export type RestaurantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant findFirst
   */
  export type RestaurantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant findFirstOrThrow
   */
  export type RestaurantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant findMany
   */
  export type RestaurantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurants to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }


  /**
   * Restaurant create
   */
  export type RestaurantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to create a Restaurant.
     */
    data: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
  }


  /**
   * Restaurant createMany
   */
  export type RestaurantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Restaurants.
     */
    data: RestaurantCreateManyInput | RestaurantCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Restaurant update
   */
  export type RestaurantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to update a Restaurant.
     */
    data: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
    /**
     * Choose, which Restaurant to update.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant updateMany
   */
  export type RestaurantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Restaurants.
     */
    data: XOR<RestaurantUpdateManyMutationInput, RestaurantUncheckedUpdateManyInput>
    /**
     * Filter which Restaurants to update
     */
    where?: RestaurantWhereInput
  }


  /**
   * Restaurant upsert
   */
  export type RestaurantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The filter to search for the Restaurant to update in case it exists.
     */
    where: RestaurantWhereUniqueInput
    /**
     * In case the Restaurant found by the `where` argument doesn't exist, create a new Restaurant with this data.
     */
    create: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
    /**
     * In case the Restaurant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
  }


  /**
   * Restaurant delete
   */
  export type RestaurantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter which Restaurant to delete.
     */
    where: RestaurantWhereUniqueInput
  }


  /**
   * Restaurant deleteMany
   */
  export type RestaurantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurants to delete
     */
    where?: RestaurantWhereInput
  }


  /**
   * Restaurant.tables
   */
  export type Restaurant$tablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    cursor?: TableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }


  /**
   * Restaurant without action
   */
  export type RestaurantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestaurantInclude<ExtArgs> | null
  }



  /**
   * Model Table
   */

  export type AggregateTable = {
    _count: TableCountAggregateOutputType | null
    _avg: TableAvgAggregateOutputType | null
    _sum: TableSumAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  export type TableAvgAggregateOutputType = {
    capacity: number | null
  }

  export type TableSumAggregateOutputType = {
    capacity: number | null
  }

  export type TableMinAggregateOutputType = {
    id: string | null
    capacity: number | null
    restaurantId: string | null
  }

  export type TableMaxAggregateOutputType = {
    id: string | null
    capacity: number | null
    restaurantId: string | null
  }

  export type TableCountAggregateOutputType = {
    id: number
    capacity: number
    restaurantId: number
    _all: number
  }


  export type TableAvgAggregateInputType = {
    capacity?: true
  }

  export type TableSumAggregateInputType = {
    capacity?: true
  }

  export type TableMinAggregateInputType = {
    id?: true
    capacity?: true
    restaurantId?: true
  }

  export type TableMaxAggregateInputType = {
    id?: true
    capacity?: true
    restaurantId?: true
  }

  export type TableCountAggregateInputType = {
    id?: true
    capacity?: true
    restaurantId?: true
    _all?: true
  }

  export type TableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Table to aggregate.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tables
    **/
    _count?: true | TableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableMaxAggregateInputType
  }

  export type GetTableAggregateType<T extends TableAggregateArgs> = {
        [P in keyof T & keyof AggregateTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTable[P]>
      : GetScalarType<T[P], AggregateTable[P]>
  }




  export type TableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
    orderBy?: TableOrderByWithAggregationInput | TableOrderByWithAggregationInput[]
    by: TableScalarFieldEnum[] | TableScalarFieldEnum
    having?: TableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableCountAggregateInputType | true
    _avg?: TableAvgAggregateInputType
    _sum?: TableSumAggregateInputType
    _min?: TableMinAggregateInputType
    _max?: TableMaxAggregateInputType
  }

  export type TableGroupByOutputType = {
    id: string
    capacity: number
    restaurantId: string
    _count: TableCountAggregateOutputType | null
    _avg: TableAvgAggregateOutputType | null
    _sum: TableSumAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  type GetTableGroupByPayload<T extends TableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableGroupByOutputType[P]>
            : GetScalarType<T[P], TableGroupByOutputType[P]>
        }
      >
    >


  export type TableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    capacity?: boolean
    restaurantId?: boolean
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    reservations?: boolean | Table$reservationsArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["table"]>

  export type TableSelectScalar = {
    id?: boolean
    capacity?: boolean
    restaurantId?: boolean
  }

  export type TableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    reservations?: boolean | Table$reservationsArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Table"
    objects: {
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      capacity: number
      restaurantId: string
    }, ExtArgs["result"]["table"]>
    composites: {}
  }


  type TableGetPayload<S extends boolean | null | undefined | TableDefaultArgs> = $Result.GetResult<Prisma.$TablePayload, S>

  type TableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TableFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TableCountAggregateInputType | true
    }

  export interface TableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Table'], meta: { name: 'Table' } }
    /**
     * Find zero or one Table that matches the filter.
     * @param {TableFindUniqueArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TableFindUniqueArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Table that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TableFindUniqueOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TableFindFirstArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tables
     * const tables = await prisma.table.findMany()
     * 
     * // Get first 10 Tables
     * const tables = await prisma.table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tableWithIdOnly = await prisma.table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Table.
     * @param {TableCreateArgs} args - Arguments to create a Table.
     * @example
     * // Create one Table
     * const Table = await prisma.table.create({
     *   data: {
     *     // ... data to create a Table
     *   }
     * })
     * 
    **/
    create<T extends TableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TableCreateArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tables.
     *     @param {TableCreateManyArgs} args - Arguments to create many Tables.
     *     @example
     *     // Create many Tables
     *     const table = await prisma.table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Table.
     * @param {TableDeleteArgs} args - Arguments to delete one Table.
     * @example
     * // Delete one Table
     * const Table = await prisma.table.delete({
     *   where: {
     *     // ... filter to delete one Table
     *   }
     * })
     * 
    **/
    delete<T extends TableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TableDeleteArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Table.
     * @param {TableUpdateArgs} args - Arguments to update one Table.
     * @example
     * // Update one Table
     * const table = await prisma.table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TableUpdateArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tables.
     * @param {TableDeleteManyArgs} args - Arguments to filter Tables to delete.
     * @example
     * // Delete a few Tables
     * const { count } = await prisma.table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tables
     * const table = await prisma.table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Table.
     * @param {TableUpsertArgs} args - Arguments to update or create a Table.
     * @example
     * // Update or create a Table
     * const table = await prisma.table.upsert({
     *   create: {
     *     // ... data to create a Table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Table we want to update
     *   }
     * })
    **/
    upsert<T extends TableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TableUpsertArgs<ExtArgs>>
    ): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableCountArgs} args - Arguments to filter Tables to count.
     * @example
     * // Count the number of Tables
     * const count = await prisma.table.count({
     *   where: {
     *     // ... the filter for the Tables we want to count
     *   }
     * })
    **/
    count<T extends TableCountArgs>(
      args?: Subset<T, TableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableAggregateArgs>(args: Subset<T, TableAggregateArgs>): Prisma.PrismaPromise<GetTableAggregateType<T>>

    /**
     * Group by Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableGroupByArgs['orderBy'] }
        : { orderBy?: TableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Table model
   */
  readonly fields: TableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    reservations<T extends Table$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, Table$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Table model
   */ 
  interface TableFieldRefs {
    readonly id: FieldRef<"Table", 'String'>
    readonly capacity: FieldRef<"Table", 'Int'>
    readonly restaurantId: FieldRef<"Table", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Table findUnique
   */
  export type TableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }


  /**
   * Table findUniqueOrThrow
   */
  export type TableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }


  /**
   * Table findFirst
   */
  export type TableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }


  /**
   * Table findFirstOrThrow
   */
  export type TableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }


  /**
   * Table findMany
   */
  export type TableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Tables to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }


  /**
   * Table create
   */
  export type TableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to create a Table.
     */
    data: XOR<TableCreateInput, TableUncheckedCreateInput>
  }


  /**
   * Table createMany
   */
  export type TableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tables.
     */
    data: TableCreateManyInput | TableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Table update
   */
  export type TableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to update a Table.
     */
    data: XOR<TableUpdateInput, TableUncheckedUpdateInput>
    /**
     * Choose, which Table to update.
     */
    where: TableWhereUniqueInput
  }


  /**
   * Table updateMany
   */
  export type TableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tables.
     */
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyInput>
    /**
     * Filter which Tables to update
     */
    where?: TableWhereInput
  }


  /**
   * Table upsert
   */
  export type TableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The filter to search for the Table to update in case it exists.
     */
    where: TableWhereUniqueInput
    /**
     * In case the Table found by the `where` argument doesn't exist, create a new Table with this data.
     */
    create: XOR<TableCreateInput, TableUncheckedCreateInput>
    /**
     * In case the Table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableUpdateInput, TableUncheckedUpdateInput>
  }


  /**
   * Table delete
   */
  export type TableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter which Table to delete.
     */
    where: TableWhereUniqueInput
  }


  /**
   * Table deleteMany
   */
  export type TableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tables to delete
     */
    where?: TableWhereInput
  }


  /**
   * Table.reservations
   */
  export type Table$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Table without action
   */
  export type TableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TableInclude<ExtArgs> | null
  }



  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationMinAggregateOutputType = {
    id: string | null
    time: Date | null
    tableId: string | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: string | null
    time: Date | null
    tableId: string | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    time: number
    tableId: number
    _all: number
  }


  export type ReservationMinAggregateInputType = {
    id?: true
    time?: true
    tableId?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    time?: true
    tableId?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    time?: true
    tableId?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: string
    time: Date
    tableId: string
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    time?: boolean
    tableId?: boolean
    table?: boolean | TableDefaultArgs<ExtArgs>
    eaters?: boolean | Reservation$eatersArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    id?: boolean
    time?: boolean
    tableId?: boolean
  }

  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    table?: boolean | TableDefaultArgs<ExtArgs>
    eaters?: boolean | Reservation$eatersArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      table: Prisma.$TablePayload<ExtArgs>
      eaters: Prisma.$EaterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      time: Date
      tableId: string
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }


  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReservationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
    **/
    create<T extends ReservationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservations.
     *     @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     *     @example
     *     // Create many Reservations
     *     const reservation = await prisma.reservation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
    **/
    delete<T extends ReservationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
    **/
    upsert<T extends ReservationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    table<T extends TableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TableDefaultArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    eaters<T extends Reservation$eatersArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$eatersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EaterPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reservation model
   */ 
  interface ReservationFieldRefs {
    readonly id: FieldRef<"Reservation", 'String'>
    readonly time: FieldRef<"Reservation", 'DateTime'>
    readonly tableId: FieldRef<"Reservation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }


  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }


  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation.eaters
   */
  export type Reservation$eatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eater
     */
    select?: EaterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EaterInclude<ExtArgs> | null
    where?: EaterWhereInput
    orderBy?: EaterOrderByWithRelationInput | EaterOrderByWithRelationInput[]
    cursor?: EaterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EaterScalarFieldEnum | EaterScalarFieldEnum[]
  }


  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
  }



  /**
   * Model Endorsement
   */

  export type AggregateEndorsement = {
    _count: EndorsementCountAggregateOutputType | null
    _min: EndorsementMinAggregateOutputType | null
    _max: EndorsementMaxAggregateOutputType | null
  }

  export type EndorsementMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type EndorsementMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type EndorsementCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type EndorsementMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type EndorsementMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type EndorsementCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type EndorsementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endorsement to aggregate.
     */
    where?: EndorsementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endorsements to fetch.
     */
    orderBy?: EndorsementOrderByWithRelationInput | EndorsementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EndorsementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endorsements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endorsements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Endorsements
    **/
    _count?: true | EndorsementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EndorsementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EndorsementMaxAggregateInputType
  }

  export type GetEndorsementAggregateType<T extends EndorsementAggregateArgs> = {
        [P in keyof T & keyof AggregateEndorsement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndorsement[P]>
      : GetScalarType<T[P], AggregateEndorsement[P]>
  }




  export type EndorsementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EndorsementWhereInput
    orderBy?: EndorsementOrderByWithAggregationInput | EndorsementOrderByWithAggregationInput[]
    by: EndorsementScalarFieldEnum[] | EndorsementScalarFieldEnum
    having?: EndorsementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EndorsementCountAggregateInputType | true
    _min?: EndorsementMinAggregateInputType
    _max?: EndorsementMaxAggregateInputType
  }

  export type EndorsementGroupByOutputType = {
    id: string
    name: string
    _count: EndorsementCountAggregateOutputType | null
    _min: EndorsementMinAggregateOutputType | null
    _max: EndorsementMaxAggregateOutputType | null
  }

  type GetEndorsementGroupByPayload<T extends EndorsementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EndorsementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EndorsementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EndorsementGroupByOutputType[P]>
            : GetScalarType<T[P], EndorsementGroupByOutputType[P]>
        }
      >
    >


  export type EndorsementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dietaryEndorsementMappings?: boolean | Endorsement$dietaryEndorsementMappingsArgs<ExtArgs>
    _count?: boolean | EndorsementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["endorsement"]>

  export type EndorsementSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type EndorsementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dietaryEndorsementMappings?: boolean | Endorsement$dietaryEndorsementMappingsArgs<ExtArgs>
    _count?: boolean | EndorsementCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EndorsementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Endorsement"
    objects: {
      dietaryEndorsementMappings: Prisma.$DietaryEndorsementMappingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["endorsement"]>
    composites: {}
  }


  type EndorsementGetPayload<S extends boolean | null | undefined | EndorsementDefaultArgs> = $Result.GetResult<Prisma.$EndorsementPayload, S>

  type EndorsementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EndorsementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EndorsementCountAggregateInputType | true
    }

  export interface EndorsementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Endorsement'], meta: { name: 'Endorsement' } }
    /**
     * Find zero or one Endorsement that matches the filter.
     * @param {EndorsementFindUniqueArgs} args - Arguments to find a Endorsement
     * @example
     * // Get one Endorsement
     * const endorsement = await prisma.endorsement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EndorsementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementFindUniqueArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Endorsement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EndorsementFindUniqueOrThrowArgs} args - Arguments to find a Endorsement
     * @example
     * // Get one Endorsement
     * const endorsement = await prisma.endorsement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EndorsementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Endorsement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementFindFirstArgs} args - Arguments to find a Endorsement
     * @example
     * // Get one Endorsement
     * const endorsement = await prisma.endorsement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EndorsementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementFindFirstArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Endorsement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementFindFirstOrThrowArgs} args - Arguments to find a Endorsement
     * @example
     * // Get one Endorsement
     * const endorsement = await prisma.endorsement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EndorsementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Endorsements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Endorsements
     * const endorsements = await prisma.endorsement.findMany()
     * 
     * // Get first 10 Endorsements
     * const endorsements = await prisma.endorsement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const endorsementWithIdOnly = await prisma.endorsement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EndorsementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Endorsement.
     * @param {EndorsementCreateArgs} args - Arguments to create a Endorsement.
     * @example
     * // Create one Endorsement
     * const Endorsement = await prisma.endorsement.create({
     *   data: {
     *     // ... data to create a Endorsement
     *   }
     * })
     * 
    **/
    create<T extends EndorsementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementCreateArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Endorsements.
     *     @param {EndorsementCreateManyArgs} args - Arguments to create many Endorsements.
     *     @example
     *     // Create many Endorsements
     *     const endorsement = await prisma.endorsement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EndorsementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endorsement.
     * @param {EndorsementDeleteArgs} args - Arguments to delete one Endorsement.
     * @example
     * // Delete one Endorsement
     * const Endorsement = await prisma.endorsement.delete({
     *   where: {
     *     // ... filter to delete one Endorsement
     *   }
     * })
     * 
    **/
    delete<T extends EndorsementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementDeleteArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Endorsement.
     * @param {EndorsementUpdateArgs} args - Arguments to update one Endorsement.
     * @example
     * // Update one Endorsement
     * const endorsement = await prisma.endorsement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EndorsementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementUpdateArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Endorsements.
     * @param {EndorsementDeleteManyArgs} args - Arguments to filter Endorsements to delete.
     * @example
     * // Delete a few Endorsements
     * const { count } = await prisma.endorsement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EndorsementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndorsementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Endorsements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Endorsements
     * const endorsement = await prisma.endorsement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EndorsementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endorsement.
     * @param {EndorsementUpsertArgs} args - Arguments to update or create a Endorsement.
     * @example
     * // Update or create a Endorsement
     * const endorsement = await prisma.endorsement.upsert({
     *   create: {
     *     // ... data to create a Endorsement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endorsement we want to update
     *   }
     * })
    **/
    upsert<T extends EndorsementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EndorsementUpsertArgs<ExtArgs>>
    ): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Endorsements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementCountArgs} args - Arguments to filter Endorsements to count.
     * @example
     * // Count the number of Endorsements
     * const count = await prisma.endorsement.count({
     *   where: {
     *     // ... the filter for the Endorsements we want to count
     *   }
     * })
    **/
    count<T extends EndorsementCountArgs>(
      args?: Subset<T, EndorsementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EndorsementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endorsement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EndorsementAggregateArgs>(args: Subset<T, EndorsementAggregateArgs>): Prisma.PrismaPromise<GetEndorsementAggregateType<T>>

    /**
     * Group by Endorsement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndorsementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EndorsementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EndorsementGroupByArgs['orderBy'] }
        : { orderBy?: EndorsementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EndorsementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEndorsementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Endorsement model
   */
  readonly fields: EndorsementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Endorsement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EndorsementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dietaryEndorsementMappings<T extends Endorsement$dietaryEndorsementMappingsArgs<ExtArgs> = {}>(args?: Subset<T, Endorsement$dietaryEndorsementMappingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Endorsement model
   */ 
  interface EndorsementFieldRefs {
    readonly id: FieldRef<"Endorsement", 'String'>
    readonly name: FieldRef<"Endorsement", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Endorsement findUnique
   */
  export type EndorsementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter, which Endorsement to fetch.
     */
    where: EndorsementWhereUniqueInput
  }


  /**
   * Endorsement findUniqueOrThrow
   */
  export type EndorsementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter, which Endorsement to fetch.
     */
    where: EndorsementWhereUniqueInput
  }


  /**
   * Endorsement findFirst
   */
  export type EndorsementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter, which Endorsement to fetch.
     */
    where?: EndorsementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endorsements to fetch.
     */
    orderBy?: EndorsementOrderByWithRelationInput | EndorsementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Endorsements.
     */
    cursor?: EndorsementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endorsements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endorsements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Endorsements.
     */
    distinct?: EndorsementScalarFieldEnum | EndorsementScalarFieldEnum[]
  }


  /**
   * Endorsement findFirstOrThrow
   */
  export type EndorsementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter, which Endorsement to fetch.
     */
    where?: EndorsementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endorsements to fetch.
     */
    orderBy?: EndorsementOrderByWithRelationInput | EndorsementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Endorsements.
     */
    cursor?: EndorsementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endorsements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endorsements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Endorsements.
     */
    distinct?: EndorsementScalarFieldEnum | EndorsementScalarFieldEnum[]
  }


  /**
   * Endorsement findMany
   */
  export type EndorsementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter, which Endorsements to fetch.
     */
    where?: EndorsementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endorsements to fetch.
     */
    orderBy?: EndorsementOrderByWithRelationInput | EndorsementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Endorsements.
     */
    cursor?: EndorsementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endorsements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endorsements.
     */
    skip?: number
    distinct?: EndorsementScalarFieldEnum | EndorsementScalarFieldEnum[]
  }


  /**
   * Endorsement create
   */
  export type EndorsementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * The data needed to create a Endorsement.
     */
    data: XOR<EndorsementCreateInput, EndorsementUncheckedCreateInput>
  }


  /**
   * Endorsement createMany
   */
  export type EndorsementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Endorsements.
     */
    data: EndorsementCreateManyInput | EndorsementCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Endorsement update
   */
  export type EndorsementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * The data needed to update a Endorsement.
     */
    data: XOR<EndorsementUpdateInput, EndorsementUncheckedUpdateInput>
    /**
     * Choose, which Endorsement to update.
     */
    where: EndorsementWhereUniqueInput
  }


  /**
   * Endorsement updateMany
   */
  export type EndorsementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Endorsements.
     */
    data: XOR<EndorsementUpdateManyMutationInput, EndorsementUncheckedUpdateManyInput>
    /**
     * Filter which Endorsements to update
     */
    where?: EndorsementWhereInput
  }


  /**
   * Endorsement upsert
   */
  export type EndorsementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * The filter to search for the Endorsement to update in case it exists.
     */
    where: EndorsementWhereUniqueInput
    /**
     * In case the Endorsement found by the `where` argument doesn't exist, create a new Endorsement with this data.
     */
    create: XOR<EndorsementCreateInput, EndorsementUncheckedCreateInput>
    /**
     * In case the Endorsement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EndorsementUpdateInput, EndorsementUncheckedUpdateInput>
  }


  /**
   * Endorsement delete
   */
  export type EndorsementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
    /**
     * Filter which Endorsement to delete.
     */
    where: EndorsementWhereUniqueInput
  }


  /**
   * Endorsement deleteMany
   */
  export type EndorsementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endorsements to delete
     */
    where?: EndorsementWhereInput
  }


  /**
   * Endorsement.dietaryEndorsementMappings
   */
  export type Endorsement$dietaryEndorsementMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    where?: DietaryEndorsementMappingWhereInput
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DietaryEndorsementMappingScalarFieldEnum | DietaryEndorsementMappingScalarFieldEnum[]
  }


  /**
   * Endorsement without action
   */
  export type EndorsementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endorsement
     */
    select?: EndorsementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndorsementInclude<ExtArgs> | null
  }



  /**
   * Model DietaryEndorsementMapping
   */

  export type AggregateDietaryEndorsementMapping = {
    _count: DietaryEndorsementMappingCountAggregateOutputType | null
    _min: DietaryEndorsementMappingMinAggregateOutputType | null
    _max: DietaryEndorsementMappingMaxAggregateOutputType | null
  }

  export type DietaryEndorsementMappingMinAggregateOutputType = {
    id: string | null
    dietaryRestrictionId: string | null
    endorsementId: string | null
  }

  export type DietaryEndorsementMappingMaxAggregateOutputType = {
    id: string | null
    dietaryRestrictionId: string | null
    endorsementId: string | null
  }

  export type DietaryEndorsementMappingCountAggregateOutputType = {
    id: number
    dietaryRestrictionId: number
    endorsementId: number
    _all: number
  }


  export type DietaryEndorsementMappingMinAggregateInputType = {
    id?: true
    dietaryRestrictionId?: true
    endorsementId?: true
  }

  export type DietaryEndorsementMappingMaxAggregateInputType = {
    id?: true
    dietaryRestrictionId?: true
    endorsementId?: true
  }

  export type DietaryEndorsementMappingCountAggregateInputType = {
    id?: true
    dietaryRestrictionId?: true
    endorsementId?: true
    _all?: true
  }

  export type DietaryEndorsementMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DietaryEndorsementMapping to aggregate.
     */
    where?: DietaryEndorsementMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryEndorsementMappings to fetch.
     */
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryEndorsementMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryEndorsementMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DietaryEndorsementMappings
    **/
    _count?: true | DietaryEndorsementMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DietaryEndorsementMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DietaryEndorsementMappingMaxAggregateInputType
  }

  export type GetDietaryEndorsementMappingAggregateType<T extends DietaryEndorsementMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateDietaryEndorsementMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDietaryEndorsementMapping[P]>
      : GetScalarType<T[P], AggregateDietaryEndorsementMapping[P]>
  }




  export type DietaryEndorsementMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DietaryEndorsementMappingWhereInput
    orderBy?: DietaryEndorsementMappingOrderByWithAggregationInput | DietaryEndorsementMappingOrderByWithAggregationInput[]
    by: DietaryEndorsementMappingScalarFieldEnum[] | DietaryEndorsementMappingScalarFieldEnum
    having?: DietaryEndorsementMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DietaryEndorsementMappingCountAggregateInputType | true
    _min?: DietaryEndorsementMappingMinAggregateInputType
    _max?: DietaryEndorsementMappingMaxAggregateInputType
  }

  export type DietaryEndorsementMappingGroupByOutputType = {
    id: string
    dietaryRestrictionId: string
    endorsementId: string
    _count: DietaryEndorsementMappingCountAggregateOutputType | null
    _min: DietaryEndorsementMappingMinAggregateOutputType | null
    _max: DietaryEndorsementMappingMaxAggregateOutputType | null
  }

  type GetDietaryEndorsementMappingGroupByPayload<T extends DietaryEndorsementMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DietaryEndorsementMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DietaryEndorsementMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DietaryEndorsementMappingGroupByOutputType[P]>
            : GetScalarType<T[P], DietaryEndorsementMappingGroupByOutputType[P]>
        }
      >
    >


  export type DietaryEndorsementMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dietaryRestrictionId?: boolean
    endorsementId?: boolean
    dietaryRestriction?: boolean | DietaryRestrictionDefaultArgs<ExtArgs>
    endorsement?: boolean | EndorsementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dietaryEndorsementMapping"]>

  export type DietaryEndorsementMappingSelectScalar = {
    id?: boolean
    dietaryRestrictionId?: boolean
    endorsementId?: boolean
  }

  export type DietaryEndorsementMappingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dietaryRestriction?: boolean | DietaryRestrictionDefaultArgs<ExtArgs>
    endorsement?: boolean | EndorsementDefaultArgs<ExtArgs>
  }


  export type $DietaryEndorsementMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DietaryEndorsementMapping"
    objects: {
      dietaryRestriction: Prisma.$DietaryRestrictionPayload<ExtArgs>
      endorsement: Prisma.$EndorsementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dietaryRestrictionId: string
      endorsementId: string
    }, ExtArgs["result"]["dietaryEndorsementMapping"]>
    composites: {}
  }


  type DietaryEndorsementMappingGetPayload<S extends boolean | null | undefined | DietaryEndorsementMappingDefaultArgs> = $Result.GetResult<Prisma.$DietaryEndorsementMappingPayload, S>

  type DietaryEndorsementMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DietaryEndorsementMappingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DietaryEndorsementMappingCountAggregateInputType | true
    }

  export interface DietaryEndorsementMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DietaryEndorsementMapping'], meta: { name: 'DietaryEndorsementMapping' } }
    /**
     * Find zero or one DietaryEndorsementMapping that matches the filter.
     * @param {DietaryEndorsementMappingFindUniqueArgs} args - Arguments to find a DietaryEndorsementMapping
     * @example
     * // Get one DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DietaryEndorsementMappingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingFindUniqueArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DietaryEndorsementMapping that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DietaryEndorsementMappingFindUniqueOrThrowArgs} args - Arguments to find a DietaryEndorsementMapping
     * @example
     * // Get one DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DietaryEndorsementMappingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DietaryEndorsementMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingFindFirstArgs} args - Arguments to find a DietaryEndorsementMapping
     * @example
     * // Get one DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DietaryEndorsementMappingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingFindFirstArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DietaryEndorsementMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingFindFirstOrThrowArgs} args - Arguments to find a DietaryEndorsementMapping
     * @example
     * // Get one DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DietaryEndorsementMappingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DietaryEndorsementMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DietaryEndorsementMappings
     * const dietaryEndorsementMappings = await prisma.dietaryEndorsementMapping.findMany()
     * 
     * // Get first 10 DietaryEndorsementMappings
     * const dietaryEndorsementMappings = await prisma.dietaryEndorsementMapping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dietaryEndorsementMappingWithIdOnly = await prisma.dietaryEndorsementMapping.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DietaryEndorsementMappingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DietaryEndorsementMapping.
     * @param {DietaryEndorsementMappingCreateArgs} args - Arguments to create a DietaryEndorsementMapping.
     * @example
     * // Create one DietaryEndorsementMapping
     * const DietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.create({
     *   data: {
     *     // ... data to create a DietaryEndorsementMapping
     *   }
     * })
     * 
    **/
    create<T extends DietaryEndorsementMappingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingCreateArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DietaryEndorsementMappings.
     *     @param {DietaryEndorsementMappingCreateManyArgs} args - Arguments to create many DietaryEndorsementMappings.
     *     @example
     *     // Create many DietaryEndorsementMappings
     *     const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DietaryEndorsementMappingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DietaryEndorsementMapping.
     * @param {DietaryEndorsementMappingDeleteArgs} args - Arguments to delete one DietaryEndorsementMapping.
     * @example
     * // Delete one DietaryEndorsementMapping
     * const DietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.delete({
     *   where: {
     *     // ... filter to delete one DietaryEndorsementMapping
     *   }
     * })
     * 
    **/
    delete<T extends DietaryEndorsementMappingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingDeleteArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DietaryEndorsementMapping.
     * @param {DietaryEndorsementMappingUpdateArgs} args - Arguments to update one DietaryEndorsementMapping.
     * @example
     * // Update one DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DietaryEndorsementMappingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingUpdateArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DietaryEndorsementMappings.
     * @param {DietaryEndorsementMappingDeleteManyArgs} args - Arguments to filter DietaryEndorsementMappings to delete.
     * @example
     * // Delete a few DietaryEndorsementMappings
     * const { count } = await prisma.dietaryEndorsementMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DietaryEndorsementMappingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DietaryEndorsementMappingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DietaryEndorsementMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DietaryEndorsementMappings
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DietaryEndorsementMappingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DietaryEndorsementMapping.
     * @param {DietaryEndorsementMappingUpsertArgs} args - Arguments to update or create a DietaryEndorsementMapping.
     * @example
     * // Update or create a DietaryEndorsementMapping
     * const dietaryEndorsementMapping = await prisma.dietaryEndorsementMapping.upsert({
     *   create: {
     *     // ... data to create a DietaryEndorsementMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DietaryEndorsementMapping we want to update
     *   }
     * })
    **/
    upsert<T extends DietaryEndorsementMappingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DietaryEndorsementMappingUpsertArgs<ExtArgs>>
    ): Prisma__DietaryEndorsementMappingClient<$Result.GetResult<Prisma.$DietaryEndorsementMappingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DietaryEndorsementMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingCountArgs} args - Arguments to filter DietaryEndorsementMappings to count.
     * @example
     * // Count the number of DietaryEndorsementMappings
     * const count = await prisma.dietaryEndorsementMapping.count({
     *   where: {
     *     // ... the filter for the DietaryEndorsementMappings we want to count
     *   }
     * })
    **/
    count<T extends DietaryEndorsementMappingCountArgs>(
      args?: Subset<T, DietaryEndorsementMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DietaryEndorsementMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DietaryEndorsementMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DietaryEndorsementMappingAggregateArgs>(args: Subset<T, DietaryEndorsementMappingAggregateArgs>): Prisma.PrismaPromise<GetDietaryEndorsementMappingAggregateType<T>>

    /**
     * Group by DietaryEndorsementMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DietaryEndorsementMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DietaryEndorsementMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DietaryEndorsementMappingGroupByArgs['orderBy'] }
        : { orderBy?: DietaryEndorsementMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DietaryEndorsementMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDietaryEndorsementMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DietaryEndorsementMapping model
   */
  readonly fields: DietaryEndorsementMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DietaryEndorsementMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DietaryEndorsementMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dietaryRestriction<T extends DietaryRestrictionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DietaryRestrictionDefaultArgs<ExtArgs>>): Prisma__DietaryRestrictionClient<$Result.GetResult<Prisma.$DietaryRestrictionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    endorsement<T extends EndorsementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EndorsementDefaultArgs<ExtArgs>>): Prisma__EndorsementClient<$Result.GetResult<Prisma.$EndorsementPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DietaryEndorsementMapping model
   */ 
  interface DietaryEndorsementMappingFieldRefs {
    readonly id: FieldRef<"DietaryEndorsementMapping", 'String'>
    readonly dietaryRestrictionId: FieldRef<"DietaryEndorsementMapping", 'String'>
    readonly endorsementId: FieldRef<"DietaryEndorsementMapping", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DietaryEndorsementMapping findUnique
   */
  export type DietaryEndorsementMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter, which DietaryEndorsementMapping to fetch.
     */
    where: DietaryEndorsementMappingWhereUniqueInput
  }


  /**
   * DietaryEndorsementMapping findUniqueOrThrow
   */
  export type DietaryEndorsementMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter, which DietaryEndorsementMapping to fetch.
     */
    where: DietaryEndorsementMappingWhereUniqueInput
  }


  /**
   * DietaryEndorsementMapping findFirst
   */
  export type DietaryEndorsementMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter, which DietaryEndorsementMapping to fetch.
     */
    where?: DietaryEndorsementMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryEndorsementMappings to fetch.
     */
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DietaryEndorsementMappings.
     */
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryEndorsementMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryEndorsementMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DietaryEndorsementMappings.
     */
    distinct?: DietaryEndorsementMappingScalarFieldEnum | DietaryEndorsementMappingScalarFieldEnum[]
  }


  /**
   * DietaryEndorsementMapping findFirstOrThrow
   */
  export type DietaryEndorsementMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter, which DietaryEndorsementMapping to fetch.
     */
    where?: DietaryEndorsementMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryEndorsementMappings to fetch.
     */
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DietaryEndorsementMappings.
     */
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryEndorsementMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryEndorsementMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DietaryEndorsementMappings.
     */
    distinct?: DietaryEndorsementMappingScalarFieldEnum | DietaryEndorsementMappingScalarFieldEnum[]
  }


  /**
   * DietaryEndorsementMapping findMany
   */
  export type DietaryEndorsementMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter, which DietaryEndorsementMappings to fetch.
     */
    where?: DietaryEndorsementMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DietaryEndorsementMappings to fetch.
     */
    orderBy?: DietaryEndorsementMappingOrderByWithRelationInput | DietaryEndorsementMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DietaryEndorsementMappings.
     */
    cursor?: DietaryEndorsementMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DietaryEndorsementMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DietaryEndorsementMappings.
     */
    skip?: number
    distinct?: DietaryEndorsementMappingScalarFieldEnum | DietaryEndorsementMappingScalarFieldEnum[]
  }


  /**
   * DietaryEndorsementMapping create
   */
  export type DietaryEndorsementMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * The data needed to create a DietaryEndorsementMapping.
     */
    data: XOR<DietaryEndorsementMappingCreateInput, DietaryEndorsementMappingUncheckedCreateInput>
  }


  /**
   * DietaryEndorsementMapping createMany
   */
  export type DietaryEndorsementMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DietaryEndorsementMappings.
     */
    data: DietaryEndorsementMappingCreateManyInput | DietaryEndorsementMappingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DietaryEndorsementMapping update
   */
  export type DietaryEndorsementMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * The data needed to update a DietaryEndorsementMapping.
     */
    data: XOR<DietaryEndorsementMappingUpdateInput, DietaryEndorsementMappingUncheckedUpdateInput>
    /**
     * Choose, which DietaryEndorsementMapping to update.
     */
    where: DietaryEndorsementMappingWhereUniqueInput
  }


  /**
   * DietaryEndorsementMapping updateMany
   */
  export type DietaryEndorsementMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DietaryEndorsementMappings.
     */
    data: XOR<DietaryEndorsementMappingUpdateManyMutationInput, DietaryEndorsementMappingUncheckedUpdateManyInput>
    /**
     * Filter which DietaryEndorsementMappings to update
     */
    where?: DietaryEndorsementMappingWhereInput
  }


  /**
   * DietaryEndorsementMapping upsert
   */
  export type DietaryEndorsementMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * The filter to search for the DietaryEndorsementMapping to update in case it exists.
     */
    where: DietaryEndorsementMappingWhereUniqueInput
    /**
     * In case the DietaryEndorsementMapping found by the `where` argument doesn't exist, create a new DietaryEndorsementMapping with this data.
     */
    create: XOR<DietaryEndorsementMappingCreateInput, DietaryEndorsementMappingUncheckedCreateInput>
    /**
     * In case the DietaryEndorsementMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DietaryEndorsementMappingUpdateInput, DietaryEndorsementMappingUncheckedUpdateInput>
  }


  /**
   * DietaryEndorsementMapping delete
   */
  export type DietaryEndorsementMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
    /**
     * Filter which DietaryEndorsementMapping to delete.
     */
    where: DietaryEndorsementMappingWhereUniqueInput
  }


  /**
   * DietaryEndorsementMapping deleteMany
   */
  export type DietaryEndorsementMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DietaryEndorsementMappings to delete
     */
    where?: DietaryEndorsementMappingWhereInput
  }


  /**
   * DietaryEndorsementMapping without action
   */
  export type DietaryEndorsementMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DietaryEndorsementMapping
     */
    select?: DietaryEndorsementMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DietaryEndorsementMappingInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EaterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    dietaryRestrictionIds: 'dietaryRestrictionIds'
  };

  export type EaterScalarFieldEnum = (typeof EaterScalarFieldEnum)[keyof typeof EaterScalarFieldEnum]


  export const DietaryRestrictionScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DietaryRestrictionScalarFieldEnum = (typeof DietaryRestrictionScalarFieldEnum)[keyof typeof DietaryRestrictionScalarFieldEnum]


  export const RestaurantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    endorsementsIds: 'endorsementsIds'
  };

  export type RestaurantScalarFieldEnum = (typeof RestaurantScalarFieldEnum)[keyof typeof RestaurantScalarFieldEnum]


  export const TableScalarFieldEnum: {
    id: 'id',
    capacity: 'capacity',
    restaurantId: 'restaurantId'
  };

  export type TableScalarFieldEnum = (typeof TableScalarFieldEnum)[keyof typeof TableScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    time: 'time',
    tableId: 'tableId'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const EndorsementScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type EndorsementScalarFieldEnum = (typeof EndorsementScalarFieldEnum)[keyof typeof EndorsementScalarFieldEnum]


  export const DietaryEndorsementMappingScalarFieldEnum: {
    id: 'id',
    dietaryRestrictionId: 'dietaryRestrictionId',
    endorsementId: 'endorsementId'
  };

  export type DietaryEndorsementMappingScalarFieldEnum = (typeof DietaryEndorsementMappingScalarFieldEnum)[keyof typeof DietaryEndorsementMappingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EaterWhereInput = {
    AND?: EaterWhereInput | EaterWhereInput[]
    OR?: EaterWhereInput[]
    NOT?: EaterWhereInput | EaterWhereInput[]
    id?: StringFilter<"Eater"> | string
    name?: StringFilter<"Eater"> | string
    location?: StringNullableFilter<"Eater"> | string | null
    dietaryRestrictionIds?: StringNullableListFilter<"Eater">
    reservations?: ReservationListRelationFilter
  }

  export type EaterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    dietaryRestrictionIds?: SortOrder
    reservations?: ReservationOrderByRelationAggregateInput
  }

  export type EaterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EaterWhereInput | EaterWhereInput[]
    OR?: EaterWhereInput[]
    NOT?: EaterWhereInput | EaterWhereInput[]
    name?: StringFilter<"Eater"> | string
    location?: StringNullableFilter<"Eater"> | string | null
    dietaryRestrictionIds?: StringNullableListFilter<"Eater">
    reservations?: ReservationListRelationFilter
  }, "id">

  export type EaterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    dietaryRestrictionIds?: SortOrder
    _count?: EaterCountOrderByAggregateInput
    _max?: EaterMaxOrderByAggregateInput
    _min?: EaterMinOrderByAggregateInput
  }

  export type EaterScalarWhereWithAggregatesInput = {
    AND?: EaterScalarWhereWithAggregatesInput | EaterScalarWhereWithAggregatesInput[]
    OR?: EaterScalarWhereWithAggregatesInput[]
    NOT?: EaterScalarWhereWithAggregatesInput | EaterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Eater"> | string
    name?: StringWithAggregatesFilter<"Eater"> | string
    location?: StringNullableWithAggregatesFilter<"Eater"> | string | null
    dietaryRestrictionIds?: StringNullableListFilter<"Eater">
  }

  export type DietaryRestrictionWhereInput = {
    AND?: DietaryRestrictionWhereInput | DietaryRestrictionWhereInput[]
    OR?: DietaryRestrictionWhereInput[]
    NOT?: DietaryRestrictionWhereInput | DietaryRestrictionWhereInput[]
    id?: StringFilter<"DietaryRestriction"> | string
    name?: StringFilter<"DietaryRestriction"> | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingListRelationFilter
  }

  export type DietaryRestrictionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dietaryEndorsementMappings?: DietaryEndorsementMappingOrderByRelationAggregateInput
  }

  export type DietaryRestrictionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DietaryRestrictionWhereInput | DietaryRestrictionWhereInput[]
    OR?: DietaryRestrictionWhereInput[]
    NOT?: DietaryRestrictionWhereInput | DietaryRestrictionWhereInput[]
    name?: StringFilter<"DietaryRestriction"> | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingListRelationFilter
  }, "id">

  export type DietaryRestrictionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DietaryRestrictionCountOrderByAggregateInput
    _max?: DietaryRestrictionMaxOrderByAggregateInput
    _min?: DietaryRestrictionMinOrderByAggregateInput
  }

  export type DietaryRestrictionScalarWhereWithAggregatesInput = {
    AND?: DietaryRestrictionScalarWhereWithAggregatesInput | DietaryRestrictionScalarWhereWithAggregatesInput[]
    OR?: DietaryRestrictionScalarWhereWithAggregatesInput[]
    NOT?: DietaryRestrictionScalarWhereWithAggregatesInput | DietaryRestrictionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DietaryRestriction"> | string
    name?: StringWithAggregatesFilter<"DietaryRestriction"> | string
  }

  export type RestaurantWhereInput = {
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    id?: StringFilter<"Restaurant"> | string
    name?: StringFilter<"Restaurant"> | string
    endorsementsIds?: StringNullableListFilter<"Restaurant">
    tables?: TableListRelationFilter
  }

  export type RestaurantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    endorsementsIds?: SortOrder
    tables?: TableOrderByRelationAggregateInput
  }

  export type RestaurantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    name?: StringFilter<"Restaurant"> | string
    endorsementsIds?: StringNullableListFilter<"Restaurant">
    tables?: TableListRelationFilter
  }, "id">

  export type RestaurantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    endorsementsIds?: SortOrder
    _count?: RestaurantCountOrderByAggregateInput
    _max?: RestaurantMaxOrderByAggregateInput
    _min?: RestaurantMinOrderByAggregateInput
  }

  export type RestaurantScalarWhereWithAggregatesInput = {
    AND?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    OR?: RestaurantScalarWhereWithAggregatesInput[]
    NOT?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Restaurant"> | string
    name?: StringWithAggregatesFilter<"Restaurant"> | string
    endorsementsIds?: StringNullableListFilter<"Restaurant">
  }

  export type TableWhereInput = {
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    id?: StringFilter<"Table"> | string
    capacity?: IntFilter<"Table"> | number
    restaurantId?: StringFilter<"Table"> | string
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    reservations?: ReservationListRelationFilter
  }

  export type TableOrderByWithRelationInput = {
    id?: SortOrder
    capacity?: SortOrder
    restaurantId?: SortOrder
    restaurant?: RestaurantOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
  }

  export type TableWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    capacity?: IntFilter<"Table"> | number
    restaurantId?: StringFilter<"Table"> | string
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    reservations?: ReservationListRelationFilter
  }, "id">

  export type TableOrderByWithAggregationInput = {
    id?: SortOrder
    capacity?: SortOrder
    restaurantId?: SortOrder
    _count?: TableCountOrderByAggregateInput
    _avg?: TableAvgOrderByAggregateInput
    _max?: TableMaxOrderByAggregateInput
    _min?: TableMinOrderByAggregateInput
    _sum?: TableSumOrderByAggregateInput
  }

  export type TableScalarWhereWithAggregatesInput = {
    AND?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    OR?: TableScalarWhereWithAggregatesInput[]
    NOT?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Table"> | string
    capacity?: IntWithAggregatesFilter<"Table"> | number
    restaurantId?: StringWithAggregatesFilter<"Table"> | string
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id?: StringFilter<"Reservation"> | string
    time?: DateTimeFilter<"Reservation"> | Date | string
    tableId?: StringFilter<"Reservation"> | string
    table?: XOR<TableRelationFilter, TableWhereInput>
    eaters?: EaterListRelationFilter
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
    tableId?: SortOrder
    table?: TableOrderByWithRelationInput
    eaters?: EaterOrderByRelationAggregateInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    time?: DateTimeFilter<"Reservation"> | Date | string
    tableId?: StringFilter<"Reservation"> | string
    table?: XOR<TableRelationFilter, TableWhereInput>
    eaters?: EaterListRelationFilter
  }, "id">

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    tableId?: SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reservation"> | string
    time?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    tableId?: StringWithAggregatesFilter<"Reservation"> | string
  }

  export type EndorsementWhereInput = {
    AND?: EndorsementWhereInput | EndorsementWhereInput[]
    OR?: EndorsementWhereInput[]
    NOT?: EndorsementWhereInput | EndorsementWhereInput[]
    id?: StringFilter<"Endorsement"> | string
    name?: StringFilter<"Endorsement"> | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingListRelationFilter
  }

  export type EndorsementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dietaryEndorsementMappings?: DietaryEndorsementMappingOrderByRelationAggregateInput
  }

  export type EndorsementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EndorsementWhereInput | EndorsementWhereInput[]
    OR?: EndorsementWhereInput[]
    NOT?: EndorsementWhereInput | EndorsementWhereInput[]
    name?: StringFilter<"Endorsement"> | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingListRelationFilter
  }, "id">

  export type EndorsementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: EndorsementCountOrderByAggregateInput
    _max?: EndorsementMaxOrderByAggregateInput
    _min?: EndorsementMinOrderByAggregateInput
  }

  export type EndorsementScalarWhereWithAggregatesInput = {
    AND?: EndorsementScalarWhereWithAggregatesInput | EndorsementScalarWhereWithAggregatesInput[]
    OR?: EndorsementScalarWhereWithAggregatesInput[]
    NOT?: EndorsementScalarWhereWithAggregatesInput | EndorsementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Endorsement"> | string
    name?: StringWithAggregatesFilter<"Endorsement"> | string
  }

  export type DietaryEndorsementMappingWhereInput = {
    AND?: DietaryEndorsementMappingWhereInput | DietaryEndorsementMappingWhereInput[]
    OR?: DietaryEndorsementMappingWhereInput[]
    NOT?: DietaryEndorsementMappingWhereInput | DietaryEndorsementMappingWhereInput[]
    id?: StringFilter<"DietaryEndorsementMapping"> | string
    dietaryRestrictionId?: StringFilter<"DietaryEndorsementMapping"> | string
    endorsementId?: StringFilter<"DietaryEndorsementMapping"> | string
    dietaryRestriction?: XOR<DietaryRestrictionRelationFilter, DietaryRestrictionWhereInput>
    endorsement?: XOR<EndorsementRelationFilter, EndorsementWhereInput>
  }

  export type DietaryEndorsementMappingOrderByWithRelationInput = {
    id?: SortOrder
    dietaryRestrictionId?: SortOrder
    endorsementId?: SortOrder
    dietaryRestriction?: DietaryRestrictionOrderByWithRelationInput
    endorsement?: EndorsementOrderByWithRelationInput
  }

  export type DietaryEndorsementMappingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DietaryEndorsementMappingWhereInput | DietaryEndorsementMappingWhereInput[]
    OR?: DietaryEndorsementMappingWhereInput[]
    NOT?: DietaryEndorsementMappingWhereInput | DietaryEndorsementMappingWhereInput[]
    dietaryRestrictionId?: StringFilter<"DietaryEndorsementMapping"> | string
    endorsementId?: StringFilter<"DietaryEndorsementMapping"> | string
    dietaryRestriction?: XOR<DietaryRestrictionRelationFilter, DietaryRestrictionWhereInput>
    endorsement?: XOR<EndorsementRelationFilter, EndorsementWhereInput>
  }, "id">

  export type DietaryEndorsementMappingOrderByWithAggregationInput = {
    id?: SortOrder
    dietaryRestrictionId?: SortOrder
    endorsementId?: SortOrder
    _count?: DietaryEndorsementMappingCountOrderByAggregateInput
    _max?: DietaryEndorsementMappingMaxOrderByAggregateInput
    _min?: DietaryEndorsementMappingMinOrderByAggregateInput
  }

  export type DietaryEndorsementMappingScalarWhereWithAggregatesInput = {
    AND?: DietaryEndorsementMappingScalarWhereWithAggregatesInput | DietaryEndorsementMappingScalarWhereWithAggregatesInput[]
    OR?: DietaryEndorsementMappingScalarWhereWithAggregatesInput[]
    NOT?: DietaryEndorsementMappingScalarWhereWithAggregatesInput | DietaryEndorsementMappingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DietaryEndorsementMapping"> | string
    dietaryRestrictionId?: StringWithAggregatesFilter<"DietaryEndorsementMapping"> | string
    endorsementId?: StringWithAggregatesFilter<"DietaryEndorsementMapping"> | string
  }

  export type EaterCreateInput = {
    id?: string
    name: string
    location?: string | null
    dietaryRestrictionIds?: EaterCreatedietaryRestrictionIdsInput | string[]
    reservations?: ReservationCreateNestedManyWithoutEatersInput
  }

  export type EaterUncheckedCreateInput = {
    id?: string
    name: string
    location?: string | null
    dietaryRestrictionIds?: EaterCreatedietaryRestrictionIdsInput | string[]
    reservations?: ReservationUncheckedCreateNestedManyWithoutEatersInput
  }

  export type EaterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
    reservations?: ReservationUpdateManyWithoutEatersNestedInput
  }

  export type EaterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
    reservations?: ReservationUncheckedUpdateManyWithoutEatersNestedInput
  }

  export type EaterCreateManyInput = {
    id?: string
    name: string
    location?: string | null
    dietaryRestrictionIds?: EaterCreatedietaryRestrictionIdsInput | string[]
  }

  export type EaterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
  }

  export type EaterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
  }

  export type DietaryRestrictionCreateInput = {
    id?: string
    name: string
    dietaryEndorsementMappings?: DietaryEndorsementMappingCreateNestedManyWithoutDietaryRestrictionInput
  }

  export type DietaryRestrictionUncheckedCreateInput = {
    id?: string
    name: string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUncheckedCreateNestedManyWithoutDietaryRestrictionInput
  }

  export type DietaryRestrictionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUpdateManyWithoutDietaryRestrictionNestedInput
  }

  export type DietaryRestrictionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUncheckedUpdateManyWithoutDietaryRestrictionNestedInput
  }

  export type DietaryRestrictionCreateManyInput = {
    id?: string
    name: string
  }

  export type DietaryRestrictionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryRestrictionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RestaurantCreateInput = {
    id?: string
    name: string
    endorsementsIds?: RestaurantCreateendorsementsIdsInput | string[]
    tables?: TableCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateInput = {
    id?: string
    name: string
    endorsementsIds?: RestaurantCreateendorsementsIdsInput | string[]
    tables?: TableUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
    tables?: TableUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
    tables?: TableUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantCreateManyInput = {
    id?: string
    name: string
    endorsementsIds?: RestaurantCreateendorsementsIdsInput | string[]
  }

  export type RestaurantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
  }

  export type RestaurantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
  }

  export type TableCreateInput = {
    id?: string
    capacity: number
    restaurant: RestaurantCreateNestedOneWithoutTablesInput
    reservations?: ReservationCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateInput = {
    id?: string
    capacity: number
    restaurantId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurant?: RestaurantUpdateOneRequiredWithoutTablesNestedInput
    reservations?: ReservationUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableCreateManyInput = {
    id?: string
    capacity: number
    restaurantId: string
  }

  export type TableUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type TableUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationCreateInput = {
    id?: string
    time: Date | string
    table: TableCreateNestedOneWithoutReservationsInput
    eaters?: EaterCreateNestedManyWithoutReservationsInput
  }

  export type ReservationUncheckedCreateInput = {
    id?: string
    time: Date | string
    tableId: string
    eaters?: EaterUncheckedCreateNestedManyWithoutReservationsInput
  }

  export type ReservationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    table?: TableUpdateOneRequiredWithoutReservationsNestedInput
    eaters?: EaterUpdateManyWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    tableId?: StringFieldUpdateOperationsInput | string
    eaters?: EaterUncheckedUpdateManyWithoutReservationsNestedInput
  }

  export type ReservationCreateManyInput = {
    id?: string
    time: Date | string
    tableId: string
  }

  export type ReservationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    tableId?: StringFieldUpdateOperationsInput | string
  }

  export type EndorsementCreateInput = {
    id?: string
    name: string
    dietaryEndorsementMappings?: DietaryEndorsementMappingCreateNestedManyWithoutEndorsementInput
  }

  export type EndorsementUncheckedCreateInput = {
    id?: string
    name: string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUncheckedCreateNestedManyWithoutEndorsementInput
  }

  export type EndorsementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUpdateManyWithoutEndorsementNestedInput
  }

  export type EndorsementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dietaryEndorsementMappings?: DietaryEndorsementMappingUncheckedUpdateManyWithoutEndorsementNestedInput
  }

  export type EndorsementCreateManyInput = {
    id?: string
    name: string
  }

  export type EndorsementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EndorsementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingCreateInput = {
    id?: string
    dietaryRestriction: DietaryRestrictionCreateNestedOneWithoutDietaryEndorsementMappingsInput
    endorsement: EndorsementCreateNestedOneWithoutDietaryEndorsementMappingsInput
  }

  export type DietaryEndorsementMappingUncheckedCreateInput = {
    id?: string
    dietaryRestrictionId: string
    endorsementId: string
  }

  export type DietaryEndorsementMappingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestriction?: DietaryRestrictionUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput
    endorsement?: EndorsementUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput
  }

  export type DietaryEndorsementMappingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictionId?: StringFieldUpdateOperationsInput | string
    endorsementId?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingCreateManyInput = {
    id?: string
    dietaryRestrictionId: string
    endorsementId: string
  }

  export type DietaryEndorsementMappingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictionId?: StringFieldUpdateOperationsInput | string
    endorsementId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EaterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    dietaryRestrictionIds?: SortOrder
  }

  export type EaterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
  }

  export type EaterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DietaryEndorsementMappingListRelationFilter = {
    every?: DietaryEndorsementMappingWhereInput
    some?: DietaryEndorsementMappingWhereInput
    none?: DietaryEndorsementMappingWhereInput
  }

  export type DietaryEndorsementMappingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DietaryRestrictionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DietaryRestrictionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DietaryRestrictionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TableListRelationFilter = {
    every?: TableWhereInput
    some?: TableWhereInput
    none?: TableWhereInput
  }

  export type TableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RestaurantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    endorsementsIds?: SortOrder
  }

  export type RestaurantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RestaurantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RestaurantRelationFilter = {
    is?: RestaurantWhereInput
    isNot?: RestaurantWhereInput
  }

  export type TableCountOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    restaurantId?: SortOrder
  }

  export type TableAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type TableMaxOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    restaurantId?: SortOrder
  }

  export type TableMinOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    restaurantId?: SortOrder
  }

  export type TableSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TableRelationFilter = {
    is?: TableWhereInput
    isNot?: TableWhereInput
  }

  export type EaterListRelationFilter = {
    every?: EaterWhereInput
    some?: EaterWhereInput
    none?: EaterWhereInput
  }

  export type EaterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    tableId?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    tableId?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    tableId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EndorsementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EndorsementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EndorsementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DietaryRestrictionRelationFilter = {
    is?: DietaryRestrictionWhereInput
    isNot?: DietaryRestrictionWhereInput
  }

  export type EndorsementRelationFilter = {
    is?: EndorsementWhereInput
    isNot?: EndorsementWhereInput
  }

  export type DietaryEndorsementMappingCountOrderByAggregateInput = {
    id?: SortOrder
    dietaryRestrictionId?: SortOrder
    endorsementId?: SortOrder
  }

  export type DietaryEndorsementMappingMaxOrderByAggregateInput = {
    id?: SortOrder
    dietaryRestrictionId?: SortOrder
    endorsementId?: SortOrder
  }

  export type DietaryEndorsementMappingMinOrderByAggregateInput = {
    id?: SortOrder
    dietaryRestrictionId?: SortOrder
    endorsementId?: SortOrder
  }

  export type EaterCreatedietaryRestrictionIdsInput = {
    set: string[]
  }

  export type ReservationCreateNestedManyWithoutEatersInput = {
    create?: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput> | ReservationCreateWithoutEatersInput[] | ReservationUncheckedCreateWithoutEatersInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutEatersInput | ReservationCreateOrConnectWithoutEatersInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutEatersInput = {
    create?: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput> | ReservationCreateWithoutEatersInput[] | ReservationUncheckedCreateWithoutEatersInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutEatersInput | ReservationCreateOrConnectWithoutEatersInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EaterUpdatedietaryRestrictionIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ReservationUpdateManyWithoutEatersNestedInput = {
    create?: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput> | ReservationCreateWithoutEatersInput[] | ReservationUncheckedCreateWithoutEatersInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutEatersInput | ReservationCreateOrConnectWithoutEatersInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutEatersInput | ReservationUpsertWithWhereUniqueWithoutEatersInput[]
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutEatersInput | ReservationUpdateWithWhereUniqueWithoutEatersInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutEatersInput | ReservationUpdateManyWithWhereWithoutEatersInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutEatersNestedInput = {
    create?: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput> | ReservationCreateWithoutEatersInput[] | ReservationUncheckedCreateWithoutEatersInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutEatersInput | ReservationCreateOrConnectWithoutEatersInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutEatersInput | ReservationUpsertWithWhereUniqueWithoutEatersInput[]
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutEatersInput | ReservationUpdateWithWhereUniqueWithoutEatersInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutEatersInput | ReservationUpdateManyWithWhereWithoutEatersInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type DietaryEndorsementMappingCreateNestedManyWithoutDietaryRestrictionInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput> | DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput[] | DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput | DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput[]
    createMany?: DietaryEndorsementMappingCreateManyDietaryRestrictionInputEnvelope
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
  }

  export type DietaryEndorsementMappingUncheckedCreateNestedManyWithoutDietaryRestrictionInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput> | DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput[] | DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput | DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput[]
    createMany?: DietaryEndorsementMappingCreateManyDietaryRestrictionInputEnvelope
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
  }

  export type DietaryEndorsementMappingUpdateManyWithoutDietaryRestrictionNestedInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput> | DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput[] | DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput | DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput[]
    upsert?: DietaryEndorsementMappingUpsertWithWhereUniqueWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpsertWithWhereUniqueWithoutDietaryRestrictionInput[]
    createMany?: DietaryEndorsementMappingCreateManyDietaryRestrictionInputEnvelope
    set?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    disconnect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    delete?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    update?: DietaryEndorsementMappingUpdateWithWhereUniqueWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpdateWithWhereUniqueWithoutDietaryRestrictionInput[]
    updateMany?: DietaryEndorsementMappingUpdateManyWithWhereWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpdateManyWithWhereWithoutDietaryRestrictionInput[]
    deleteMany?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
  }

  export type DietaryEndorsementMappingUncheckedUpdateManyWithoutDietaryRestrictionNestedInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput> | DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput[] | DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput | DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput[]
    upsert?: DietaryEndorsementMappingUpsertWithWhereUniqueWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpsertWithWhereUniqueWithoutDietaryRestrictionInput[]
    createMany?: DietaryEndorsementMappingCreateManyDietaryRestrictionInputEnvelope
    set?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    disconnect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    delete?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    update?: DietaryEndorsementMappingUpdateWithWhereUniqueWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpdateWithWhereUniqueWithoutDietaryRestrictionInput[]
    updateMany?: DietaryEndorsementMappingUpdateManyWithWhereWithoutDietaryRestrictionInput | DietaryEndorsementMappingUpdateManyWithWhereWithoutDietaryRestrictionInput[]
    deleteMany?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
  }

  export type RestaurantCreateendorsementsIdsInput = {
    set: string[]
  }

  export type TableCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput> | TableCreateWithoutRestaurantInput[] | TableUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantInput | TableCreateOrConnectWithoutRestaurantInput[]
    createMany?: TableCreateManyRestaurantInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type TableUncheckedCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput> | TableCreateWithoutRestaurantInput[] | TableUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantInput | TableCreateOrConnectWithoutRestaurantInput[]
    createMany?: TableCreateManyRestaurantInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type RestaurantUpdateendorsementsIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TableUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput> | TableCreateWithoutRestaurantInput[] | TableUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantInput | TableCreateOrConnectWithoutRestaurantInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutRestaurantInput | TableUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: TableCreateManyRestaurantInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutRestaurantInput | TableUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: TableUpdateManyWithWhereWithoutRestaurantInput | TableUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type TableUncheckedUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput> | TableCreateWithoutRestaurantInput[] | TableUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantInput | TableCreateOrConnectWithoutRestaurantInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutRestaurantInput | TableUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: TableCreateManyRestaurantInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutRestaurantInput | TableUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: TableUpdateManyWithWhereWithoutRestaurantInput | TableUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type RestaurantCreateNestedOneWithoutTablesInput = {
    create?: XOR<RestaurantCreateWithoutTablesInput, RestaurantUncheckedCreateWithoutTablesInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutTablesInput
    connect?: RestaurantWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutTableInput = {
    create?: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput> | ReservationCreateWithoutTableInput[] | ReservationUncheckedCreateWithoutTableInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTableInput | ReservationCreateOrConnectWithoutTableInput[]
    createMany?: ReservationCreateManyTableInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutTableInput = {
    create?: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput> | ReservationCreateWithoutTableInput[] | ReservationUncheckedCreateWithoutTableInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTableInput | ReservationCreateOrConnectWithoutTableInput[]
    createMany?: ReservationCreateManyTableInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RestaurantUpdateOneRequiredWithoutTablesNestedInput = {
    create?: XOR<RestaurantCreateWithoutTablesInput, RestaurantUncheckedCreateWithoutTablesInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutTablesInput
    upsert?: RestaurantUpsertWithoutTablesInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutTablesInput, RestaurantUpdateWithoutTablesInput>, RestaurantUncheckedUpdateWithoutTablesInput>
  }

  export type ReservationUpdateManyWithoutTableNestedInput = {
    create?: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput> | ReservationCreateWithoutTableInput[] | ReservationUncheckedCreateWithoutTableInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTableInput | ReservationCreateOrConnectWithoutTableInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutTableInput | ReservationUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: ReservationCreateManyTableInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutTableInput | ReservationUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutTableInput | ReservationUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutTableNestedInput = {
    create?: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput> | ReservationCreateWithoutTableInput[] | ReservationUncheckedCreateWithoutTableInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutTableInput | ReservationCreateOrConnectWithoutTableInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutTableInput | ReservationUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: ReservationCreateManyTableInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutTableInput | ReservationUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutTableInput | ReservationUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type TableCreateNestedOneWithoutReservationsInput = {
    create?: XOR<TableCreateWithoutReservationsInput, TableUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: TableCreateOrConnectWithoutReservationsInput
    connect?: TableWhereUniqueInput
  }

  export type EaterCreateNestedManyWithoutReservationsInput = {
    create?: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput> | EaterCreateWithoutReservationsInput[] | EaterUncheckedCreateWithoutReservationsInput[]
    connectOrCreate?: EaterCreateOrConnectWithoutReservationsInput | EaterCreateOrConnectWithoutReservationsInput[]
    connect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
  }

  export type EaterUncheckedCreateNestedManyWithoutReservationsInput = {
    create?: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput> | EaterCreateWithoutReservationsInput[] | EaterUncheckedCreateWithoutReservationsInput[]
    connectOrCreate?: EaterCreateOrConnectWithoutReservationsInput | EaterCreateOrConnectWithoutReservationsInput[]
    connect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TableUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<TableCreateWithoutReservationsInput, TableUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: TableCreateOrConnectWithoutReservationsInput
    upsert?: TableUpsertWithoutReservationsInput
    connect?: TableWhereUniqueInput
    update?: XOR<XOR<TableUpdateToOneWithWhereWithoutReservationsInput, TableUpdateWithoutReservationsInput>, TableUncheckedUpdateWithoutReservationsInput>
  }

  export type EaterUpdateManyWithoutReservationsNestedInput = {
    create?: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput> | EaterCreateWithoutReservationsInput[] | EaterUncheckedCreateWithoutReservationsInput[]
    connectOrCreate?: EaterCreateOrConnectWithoutReservationsInput | EaterCreateOrConnectWithoutReservationsInput[]
    upsert?: EaterUpsertWithWhereUniqueWithoutReservationsInput | EaterUpsertWithWhereUniqueWithoutReservationsInput[]
    set?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    disconnect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    delete?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    connect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    update?: EaterUpdateWithWhereUniqueWithoutReservationsInput | EaterUpdateWithWhereUniqueWithoutReservationsInput[]
    updateMany?: EaterUpdateManyWithWhereWithoutReservationsInput | EaterUpdateManyWithWhereWithoutReservationsInput[]
    deleteMany?: EaterScalarWhereInput | EaterScalarWhereInput[]
  }

  export type EaterUncheckedUpdateManyWithoutReservationsNestedInput = {
    create?: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput> | EaterCreateWithoutReservationsInput[] | EaterUncheckedCreateWithoutReservationsInput[]
    connectOrCreate?: EaterCreateOrConnectWithoutReservationsInput | EaterCreateOrConnectWithoutReservationsInput[]
    upsert?: EaterUpsertWithWhereUniqueWithoutReservationsInput | EaterUpsertWithWhereUniqueWithoutReservationsInput[]
    set?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    disconnect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    delete?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    connect?: EaterWhereUniqueInput | EaterWhereUniqueInput[]
    update?: EaterUpdateWithWhereUniqueWithoutReservationsInput | EaterUpdateWithWhereUniqueWithoutReservationsInput[]
    updateMany?: EaterUpdateManyWithWhereWithoutReservationsInput | EaterUpdateManyWithWhereWithoutReservationsInput[]
    deleteMany?: EaterScalarWhereInput | EaterScalarWhereInput[]
  }

  export type DietaryEndorsementMappingCreateNestedManyWithoutEndorsementInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput> | DietaryEndorsementMappingCreateWithoutEndorsementInput[] | DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput | DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput[]
    createMany?: DietaryEndorsementMappingCreateManyEndorsementInputEnvelope
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
  }

  export type DietaryEndorsementMappingUncheckedCreateNestedManyWithoutEndorsementInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput> | DietaryEndorsementMappingCreateWithoutEndorsementInput[] | DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput | DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput[]
    createMany?: DietaryEndorsementMappingCreateManyEndorsementInputEnvelope
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
  }

  export type DietaryEndorsementMappingUpdateManyWithoutEndorsementNestedInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput> | DietaryEndorsementMappingCreateWithoutEndorsementInput[] | DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput | DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput[]
    upsert?: DietaryEndorsementMappingUpsertWithWhereUniqueWithoutEndorsementInput | DietaryEndorsementMappingUpsertWithWhereUniqueWithoutEndorsementInput[]
    createMany?: DietaryEndorsementMappingCreateManyEndorsementInputEnvelope
    set?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    disconnect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    delete?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    update?: DietaryEndorsementMappingUpdateWithWhereUniqueWithoutEndorsementInput | DietaryEndorsementMappingUpdateWithWhereUniqueWithoutEndorsementInput[]
    updateMany?: DietaryEndorsementMappingUpdateManyWithWhereWithoutEndorsementInput | DietaryEndorsementMappingUpdateManyWithWhereWithoutEndorsementInput[]
    deleteMany?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
  }

  export type DietaryEndorsementMappingUncheckedUpdateManyWithoutEndorsementNestedInput = {
    create?: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput> | DietaryEndorsementMappingCreateWithoutEndorsementInput[] | DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput[]
    connectOrCreate?: DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput | DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput[]
    upsert?: DietaryEndorsementMappingUpsertWithWhereUniqueWithoutEndorsementInput | DietaryEndorsementMappingUpsertWithWhereUniqueWithoutEndorsementInput[]
    createMany?: DietaryEndorsementMappingCreateManyEndorsementInputEnvelope
    set?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    disconnect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    delete?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    connect?: DietaryEndorsementMappingWhereUniqueInput | DietaryEndorsementMappingWhereUniqueInput[]
    update?: DietaryEndorsementMappingUpdateWithWhereUniqueWithoutEndorsementInput | DietaryEndorsementMappingUpdateWithWhereUniqueWithoutEndorsementInput[]
    updateMany?: DietaryEndorsementMappingUpdateManyWithWhereWithoutEndorsementInput | DietaryEndorsementMappingUpdateManyWithWhereWithoutEndorsementInput[]
    deleteMany?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
  }

  export type DietaryRestrictionCreateNestedOneWithoutDietaryEndorsementMappingsInput = {
    create?: XOR<DietaryRestrictionCreateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    connectOrCreate?: DietaryRestrictionCreateOrConnectWithoutDietaryEndorsementMappingsInput
    connect?: DietaryRestrictionWhereUniqueInput
  }

  export type EndorsementCreateNestedOneWithoutDietaryEndorsementMappingsInput = {
    create?: XOR<EndorsementCreateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    connectOrCreate?: EndorsementCreateOrConnectWithoutDietaryEndorsementMappingsInput
    connect?: EndorsementWhereUniqueInput
  }

  export type DietaryRestrictionUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput = {
    create?: XOR<DietaryRestrictionCreateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    connectOrCreate?: DietaryRestrictionCreateOrConnectWithoutDietaryEndorsementMappingsInput
    upsert?: DietaryRestrictionUpsertWithoutDietaryEndorsementMappingsInput
    connect?: DietaryRestrictionWhereUniqueInput
    update?: XOR<XOR<DietaryRestrictionUpdateToOneWithWhereWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUpdateWithoutDietaryEndorsementMappingsInput>, DietaryRestrictionUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
  }

  export type EndorsementUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput = {
    create?: XOR<EndorsementCreateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    connectOrCreate?: EndorsementCreateOrConnectWithoutDietaryEndorsementMappingsInput
    upsert?: EndorsementUpsertWithoutDietaryEndorsementMappingsInput
    connect?: EndorsementWhereUniqueInput
    update?: XOR<XOR<EndorsementUpdateToOneWithWhereWithoutDietaryEndorsementMappingsInput, EndorsementUpdateWithoutDietaryEndorsementMappingsInput>, EndorsementUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ReservationCreateWithoutEatersInput = {
    id?: string
    time: Date | string
    table: TableCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutEatersInput = {
    id?: string
    time: Date | string
    tableId: string
  }

  export type ReservationCreateOrConnectWithoutEatersInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput>
  }

  export type ReservationUpsertWithWhereUniqueWithoutEatersInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutEatersInput, ReservationUncheckedUpdateWithoutEatersInput>
    create: XOR<ReservationCreateWithoutEatersInput, ReservationUncheckedCreateWithoutEatersInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutEatersInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutEatersInput, ReservationUncheckedUpdateWithoutEatersInput>
  }

  export type ReservationUpdateManyWithWhereWithoutEatersInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutEatersInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    id?: StringFilter<"Reservation"> | string
    time?: DateTimeFilter<"Reservation"> | Date | string
    tableId?: StringFilter<"Reservation"> | string
  }

  export type DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput = {
    id?: string
    endorsement: EndorsementCreateNestedOneWithoutDietaryEndorsementMappingsInput
  }

  export type DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput = {
    id?: string
    endorsementId: string
  }

  export type DietaryEndorsementMappingCreateOrConnectWithoutDietaryRestrictionInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    create: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput>
  }

  export type DietaryEndorsementMappingCreateManyDietaryRestrictionInputEnvelope = {
    data: DietaryEndorsementMappingCreateManyDietaryRestrictionInput | DietaryEndorsementMappingCreateManyDietaryRestrictionInput[]
    skipDuplicates?: boolean
  }

  export type DietaryEndorsementMappingUpsertWithWhereUniqueWithoutDietaryRestrictionInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    update: XOR<DietaryEndorsementMappingUpdateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedUpdateWithoutDietaryRestrictionInput>
    create: XOR<DietaryEndorsementMappingCreateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedCreateWithoutDietaryRestrictionInput>
  }

  export type DietaryEndorsementMappingUpdateWithWhereUniqueWithoutDietaryRestrictionInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    data: XOR<DietaryEndorsementMappingUpdateWithoutDietaryRestrictionInput, DietaryEndorsementMappingUncheckedUpdateWithoutDietaryRestrictionInput>
  }

  export type DietaryEndorsementMappingUpdateManyWithWhereWithoutDietaryRestrictionInput = {
    where: DietaryEndorsementMappingScalarWhereInput
    data: XOR<DietaryEndorsementMappingUpdateManyMutationInput, DietaryEndorsementMappingUncheckedUpdateManyWithoutDietaryRestrictionInput>
  }

  export type DietaryEndorsementMappingScalarWhereInput = {
    AND?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
    OR?: DietaryEndorsementMappingScalarWhereInput[]
    NOT?: DietaryEndorsementMappingScalarWhereInput | DietaryEndorsementMappingScalarWhereInput[]
    id?: StringFilter<"DietaryEndorsementMapping"> | string
    dietaryRestrictionId?: StringFilter<"DietaryEndorsementMapping"> | string
    endorsementId?: StringFilter<"DietaryEndorsementMapping"> | string
  }

  export type TableCreateWithoutRestaurantInput = {
    id?: string
    capacity: number
    reservations?: ReservationCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutRestaurantInput = {
    id?: string
    capacity: number
    reservations?: ReservationUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutRestaurantInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput>
  }

  export type TableCreateManyRestaurantInputEnvelope = {
    data: TableCreateManyRestaurantInput | TableCreateManyRestaurantInput[]
    skipDuplicates?: boolean
  }

  export type TableUpsertWithWhereUniqueWithoutRestaurantInput = {
    where: TableWhereUniqueInput
    update: XOR<TableUpdateWithoutRestaurantInput, TableUncheckedUpdateWithoutRestaurantInput>
    create: XOR<TableCreateWithoutRestaurantInput, TableUncheckedCreateWithoutRestaurantInput>
  }

  export type TableUpdateWithWhereUniqueWithoutRestaurantInput = {
    where: TableWhereUniqueInput
    data: XOR<TableUpdateWithoutRestaurantInput, TableUncheckedUpdateWithoutRestaurantInput>
  }

  export type TableUpdateManyWithWhereWithoutRestaurantInput = {
    where: TableScalarWhereInput
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyWithoutRestaurantInput>
  }

  export type TableScalarWhereInput = {
    AND?: TableScalarWhereInput | TableScalarWhereInput[]
    OR?: TableScalarWhereInput[]
    NOT?: TableScalarWhereInput | TableScalarWhereInput[]
    id?: StringFilter<"Table"> | string
    capacity?: IntFilter<"Table"> | number
    restaurantId?: StringFilter<"Table"> | string
  }

  export type RestaurantCreateWithoutTablesInput = {
    id?: string
    name: string
    endorsementsIds?: RestaurantCreateendorsementsIdsInput | string[]
  }

  export type RestaurantUncheckedCreateWithoutTablesInput = {
    id?: string
    name: string
    endorsementsIds?: RestaurantCreateendorsementsIdsInput | string[]
  }

  export type RestaurantCreateOrConnectWithoutTablesInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutTablesInput, RestaurantUncheckedCreateWithoutTablesInput>
  }

  export type ReservationCreateWithoutTableInput = {
    id?: string
    time: Date | string
    eaters?: EaterCreateNestedManyWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutTableInput = {
    id?: string
    time: Date | string
    eaters?: EaterUncheckedCreateNestedManyWithoutReservationsInput
  }

  export type ReservationCreateOrConnectWithoutTableInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput>
  }

  export type ReservationCreateManyTableInputEnvelope = {
    data: ReservationCreateManyTableInput | ReservationCreateManyTableInput[]
    skipDuplicates?: boolean
  }

  export type RestaurantUpsertWithoutTablesInput = {
    update: XOR<RestaurantUpdateWithoutTablesInput, RestaurantUncheckedUpdateWithoutTablesInput>
    create: XOR<RestaurantCreateWithoutTablesInput, RestaurantUncheckedCreateWithoutTablesInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutTablesInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutTablesInput, RestaurantUncheckedUpdateWithoutTablesInput>
  }

  export type RestaurantUpdateWithoutTablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
  }

  export type RestaurantUncheckedUpdateWithoutTablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    endorsementsIds?: RestaurantUpdateendorsementsIdsInput | string[]
  }

  export type ReservationUpsertWithWhereUniqueWithoutTableInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutTableInput, ReservationUncheckedUpdateWithoutTableInput>
    create: XOR<ReservationCreateWithoutTableInput, ReservationUncheckedCreateWithoutTableInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutTableInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutTableInput, ReservationUncheckedUpdateWithoutTableInput>
  }

  export type ReservationUpdateManyWithWhereWithoutTableInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutTableInput>
  }

  export type TableCreateWithoutReservationsInput = {
    id?: string
    capacity: number
    restaurant: RestaurantCreateNestedOneWithoutTablesInput
  }

  export type TableUncheckedCreateWithoutReservationsInput = {
    id?: string
    capacity: number
    restaurantId: string
  }

  export type TableCreateOrConnectWithoutReservationsInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutReservationsInput, TableUncheckedCreateWithoutReservationsInput>
  }

  export type EaterCreateWithoutReservationsInput = {
    id?: string
    name: string
    location?: string | null
    dietaryRestrictionIds?: EaterCreatedietaryRestrictionIdsInput | string[]
  }

  export type EaterUncheckedCreateWithoutReservationsInput = {
    id?: string
    name: string
    location?: string | null
    dietaryRestrictionIds?: EaterCreatedietaryRestrictionIdsInput | string[]
  }

  export type EaterCreateOrConnectWithoutReservationsInput = {
    where: EaterWhereUniqueInput
    create: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput>
  }

  export type TableUpsertWithoutReservationsInput = {
    update: XOR<TableUpdateWithoutReservationsInput, TableUncheckedUpdateWithoutReservationsInput>
    create: XOR<TableCreateWithoutReservationsInput, TableUncheckedCreateWithoutReservationsInput>
    where?: TableWhereInput
  }

  export type TableUpdateToOneWithWhereWithoutReservationsInput = {
    where?: TableWhereInput
    data: XOR<TableUpdateWithoutReservationsInput, TableUncheckedUpdateWithoutReservationsInput>
  }

  export type TableUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurant?: RestaurantUpdateOneRequiredWithoutTablesNestedInput
  }

  export type TableUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantId?: StringFieldUpdateOperationsInput | string
  }

  export type EaterUpsertWithWhereUniqueWithoutReservationsInput = {
    where: EaterWhereUniqueInput
    update: XOR<EaterUpdateWithoutReservationsInput, EaterUncheckedUpdateWithoutReservationsInput>
    create: XOR<EaterCreateWithoutReservationsInput, EaterUncheckedCreateWithoutReservationsInput>
  }

  export type EaterUpdateWithWhereUniqueWithoutReservationsInput = {
    where: EaterWhereUniqueInput
    data: XOR<EaterUpdateWithoutReservationsInput, EaterUncheckedUpdateWithoutReservationsInput>
  }

  export type EaterUpdateManyWithWhereWithoutReservationsInput = {
    where: EaterScalarWhereInput
    data: XOR<EaterUpdateManyMutationInput, EaterUncheckedUpdateManyWithoutReservationsInput>
  }

  export type EaterScalarWhereInput = {
    AND?: EaterScalarWhereInput | EaterScalarWhereInput[]
    OR?: EaterScalarWhereInput[]
    NOT?: EaterScalarWhereInput | EaterScalarWhereInput[]
    id?: StringFilter<"Eater"> | string
    name?: StringFilter<"Eater"> | string
    location?: StringNullableFilter<"Eater"> | string | null
    dietaryRestrictionIds?: StringNullableListFilter<"Eater">
  }

  export type DietaryEndorsementMappingCreateWithoutEndorsementInput = {
    id?: string
    dietaryRestriction: DietaryRestrictionCreateNestedOneWithoutDietaryEndorsementMappingsInput
  }

  export type DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput = {
    id?: string
    dietaryRestrictionId: string
  }

  export type DietaryEndorsementMappingCreateOrConnectWithoutEndorsementInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    create: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput>
  }

  export type DietaryEndorsementMappingCreateManyEndorsementInputEnvelope = {
    data: DietaryEndorsementMappingCreateManyEndorsementInput | DietaryEndorsementMappingCreateManyEndorsementInput[]
    skipDuplicates?: boolean
  }

  export type DietaryEndorsementMappingUpsertWithWhereUniqueWithoutEndorsementInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    update: XOR<DietaryEndorsementMappingUpdateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedUpdateWithoutEndorsementInput>
    create: XOR<DietaryEndorsementMappingCreateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedCreateWithoutEndorsementInput>
  }

  export type DietaryEndorsementMappingUpdateWithWhereUniqueWithoutEndorsementInput = {
    where: DietaryEndorsementMappingWhereUniqueInput
    data: XOR<DietaryEndorsementMappingUpdateWithoutEndorsementInput, DietaryEndorsementMappingUncheckedUpdateWithoutEndorsementInput>
  }

  export type DietaryEndorsementMappingUpdateManyWithWhereWithoutEndorsementInput = {
    where: DietaryEndorsementMappingScalarWhereInput
    data: XOR<DietaryEndorsementMappingUpdateManyMutationInput, DietaryEndorsementMappingUncheckedUpdateManyWithoutEndorsementInput>
  }

  export type DietaryRestrictionCreateWithoutDietaryEndorsementMappingsInput = {
    id?: string
    name: string
  }

  export type DietaryRestrictionUncheckedCreateWithoutDietaryEndorsementMappingsInput = {
    id?: string
    name: string
  }

  export type DietaryRestrictionCreateOrConnectWithoutDietaryEndorsementMappingsInput = {
    where: DietaryRestrictionWhereUniqueInput
    create: XOR<DietaryRestrictionCreateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedCreateWithoutDietaryEndorsementMappingsInput>
  }

  export type EndorsementCreateWithoutDietaryEndorsementMappingsInput = {
    id?: string
    name: string
  }

  export type EndorsementUncheckedCreateWithoutDietaryEndorsementMappingsInput = {
    id?: string
    name: string
  }

  export type EndorsementCreateOrConnectWithoutDietaryEndorsementMappingsInput = {
    where: EndorsementWhereUniqueInput
    create: XOR<EndorsementCreateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedCreateWithoutDietaryEndorsementMappingsInput>
  }

  export type DietaryRestrictionUpsertWithoutDietaryEndorsementMappingsInput = {
    update: XOR<DietaryRestrictionUpdateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
    create: XOR<DietaryRestrictionCreateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    where?: DietaryRestrictionWhereInput
  }

  export type DietaryRestrictionUpdateToOneWithWhereWithoutDietaryEndorsementMappingsInput = {
    where?: DietaryRestrictionWhereInput
    data: XOR<DietaryRestrictionUpdateWithoutDietaryEndorsementMappingsInput, DietaryRestrictionUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
  }

  export type DietaryRestrictionUpdateWithoutDietaryEndorsementMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryRestrictionUncheckedUpdateWithoutDietaryEndorsementMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EndorsementUpsertWithoutDietaryEndorsementMappingsInput = {
    update: XOR<EndorsementUpdateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
    create: XOR<EndorsementCreateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedCreateWithoutDietaryEndorsementMappingsInput>
    where?: EndorsementWhereInput
  }

  export type EndorsementUpdateToOneWithWhereWithoutDietaryEndorsementMappingsInput = {
    where?: EndorsementWhereInput
    data: XOR<EndorsementUpdateWithoutDietaryEndorsementMappingsInput, EndorsementUncheckedUpdateWithoutDietaryEndorsementMappingsInput>
  }

  export type EndorsementUpdateWithoutDietaryEndorsementMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EndorsementUncheckedUpdateWithoutDietaryEndorsementMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUpdateWithoutEatersInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    table?: TableUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutEatersInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    tableId?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUncheckedUpdateManyWithoutEatersInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    tableId?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingCreateManyDietaryRestrictionInput = {
    id?: string
    endorsementId: string
  }

  export type DietaryEndorsementMappingUpdateWithoutDietaryRestrictionInput = {
    id?: StringFieldUpdateOperationsInput | string
    endorsement?: EndorsementUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput
  }

  export type DietaryEndorsementMappingUncheckedUpdateWithoutDietaryRestrictionInput = {
    id?: StringFieldUpdateOperationsInput | string
    endorsementId?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingUncheckedUpdateManyWithoutDietaryRestrictionInput = {
    id?: StringFieldUpdateOperationsInput | string
    endorsementId?: StringFieldUpdateOperationsInput | string
  }

  export type TableCreateManyRestaurantInput = {
    id?: string
    capacity: number
  }

  export type TableUpdateWithoutRestaurantInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    reservations?: ReservationUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutRestaurantInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    reservations?: ReservationUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateManyWithoutRestaurantInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type ReservationCreateManyTableInput = {
    id?: string
    time: Date | string
  }

  export type ReservationUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    eaters?: EaterUpdateManyWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    eaters?: EaterUncheckedUpdateManyWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EaterUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
  }

  export type EaterUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
  }

  export type EaterUncheckedUpdateManyWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dietaryRestrictionIds?: EaterUpdatedietaryRestrictionIdsInput | string[]
  }

  export type DietaryEndorsementMappingCreateManyEndorsementInput = {
    id?: string
    dietaryRestrictionId: string
  }

  export type DietaryEndorsementMappingUpdateWithoutEndorsementInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestriction?: DietaryRestrictionUpdateOneRequiredWithoutDietaryEndorsementMappingsNestedInput
  }

  export type DietaryEndorsementMappingUncheckedUpdateWithoutEndorsementInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictionId?: StringFieldUpdateOperationsInput | string
  }

  export type DietaryEndorsementMappingUncheckedUpdateManyWithoutEndorsementInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictionId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EaterCountOutputTypeDefaultArgs instead
     */
    export type EaterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EaterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DietaryRestrictionCountOutputTypeDefaultArgs instead
     */
    export type DietaryRestrictionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DietaryRestrictionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantCountOutputTypeDefaultArgs instead
     */
    export type RestaurantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TableCountOutputTypeDefaultArgs instead
     */
    export type TableCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TableCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationCountOutputTypeDefaultArgs instead
     */
    export type ReservationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EndorsementCountOutputTypeDefaultArgs instead
     */
    export type EndorsementCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EndorsementCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EaterDefaultArgs instead
     */
    export type EaterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EaterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DietaryRestrictionDefaultArgs instead
     */
    export type DietaryRestrictionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DietaryRestrictionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantDefaultArgs instead
     */
    export type RestaurantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TableDefaultArgs instead
     */
    export type TableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationDefaultArgs instead
     */
    export type ReservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EndorsementDefaultArgs instead
     */
    export type EndorsementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EndorsementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DietaryEndorsementMappingDefaultArgs instead
     */
    export type DietaryEndorsementMappingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DietaryEndorsementMappingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}